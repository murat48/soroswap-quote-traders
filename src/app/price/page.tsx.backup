/* eslint-disable @typescript-eslint/no-explicit-any */
'use client';

import React, { useEffect, useState, useCallback, useRef } from 'react';
import { usePriceTracker } from '@/hooks/use-price-trackernew';
import { PriceDisplay } from '@/components/price-tracker/price-display';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { useFreighter } from '@/hooks/use-freighter';
import { soroswapAPI } from '@/lib/api';
import { ASSET_OPTIONS, DEFAULT_PROTOCOLS, ASSET_CONFIGS, DEFAULT_ASSET_CONFIG } from '@/lib/constants';


export default function PriceBasedAutoTrader() {
  const {
    currentPrice,
    isTracking,
    lastUpdate,
    error,
    startTracking,
    stopTracking
  } = usePriceTracker();

  // Telegram bot
  const [telegramBot, setTelegramBot] = useState<any>(null);
  const [telegramChatId, setTelegramChatId] = useState('');

  // Freighter wallet
  const freighter = useFreighter();
  const { isAvailable, isConnected, publicKey, connect, signTransaction, error: freighterError } = freighter;

  // 🎯 Pre-Authorization States (Gelişmiş Transfer Sistemi)
  const [preAuthBuyOrder, setPreAuthBuyOrder] = useState<{
    targetPrice: string;
    amount: string;
    requiredXLM?: number;
    estimatedOutput?: number;
    transferHash?: string;
    expiry: Date;
    status: string;
    isBot?: boolean;
  } | null>(null);
  
  const [preAuthSellOrder, setPreAuthSellOrder] = useState<{
    targetPrice: string;
    amount: string;
    expiry: Date;
    status: string;
    isBot?: boolean;
  } | null>(null);

  // 🤖 Grid Trading Bot - Otomatik Alım + Satım Sistemi
  const [gridTradingBot, setGridTradingBot] = useState<{
    buyPrice: string;
    sellPrice: string;
    amount: string;
    isActive: boolean;
    currentStep: 'waiting_buy' | 'waiting_sell' | 'completed';
    purchasedAmount?: string;
    buyHash?: string;
    sellHash?: string;
    expiry: Date;
    status: string;
    isBot?: boolean;
  } | null>(null);

  // 🤖 Bot Wallet Sistemi
  const [botWallet, setBotWallet] = useState<{
    publicKey: string;
    secretKey: string;
  } | null>(null);
  const [botMode, setBotMode] = useState<'manual' | 'auto'>('manual');
  const [botBalance, setBotBalance] = useState<number>(0);
  const [customWalletAddress, setCustomWalletAddress] = useState('GALA3KXZFMIQISYVBONAJH3A64CJMPYIMRC4ZTLAQ54AYE6XLYC2HE3M');

  // 🎯 Fiyat Bazlı Otomatik İşlem - Ana Odak
  const [autoTradeAssetIn, setAutoTradeAssetIn] = useState(ASSET_OPTIONS[0].value); // XLM
  const [autoTradeAssetOut, setAutoTradeAssetOut] = useState(ASSET_OPTIONS[2].value); // USDC
  const [buyTargetPrice, setBuyTargetPrice] = useState('');
  const [sellTargetPrice, setSellTargetPrice] = useState('');
  const [autoBuyAmount, setAutoBuyAmount] = useState('');
  const [autoSellAmount, setAutoSellAmount] = useState('');
  const [isAutoTradingEnabled, setIsAutoTradingEnabled] = useState(false);
  const [autoTradeStatus, setAutoTradeStatus] = useState<string | null>(null);
  const [isTrading, setIsTrading] = useState(false);
  const [hasAutoTradeError, setHasAutoTradeError] = useState(false);
  const lastAutoTradeCheck = useRef<Date | null>(null);

  // 🤖 Grid Trading Bot Input States
  const [gridBuyPrice, setGridBuyPrice] = useState('');
  const [gridSellPrice, setGridSellPrice] = useState('');
  const [gridAmount, setGridAmount] = useState('');

  // 📊 Manuel Fiyat Kontrolü
  const [manualPriceMode, setManualPriceMode] = useState(false);
  const [manualPrice, setManualPrice] = useState('');

  // Fiyat belirleme mantığı - currentPrice'ı override etmek için
  const displayPrice = manualPriceMode && manualPrice ? parseFloat(manualPrice) : currentPrice;

  // Ana sayfa ile aynı dynamic trade functions
  const getAssetSymbol = useCallback((assetAddress: string): string => {
    const asset = ASSET_OPTIONS.find(a => a.value === assetAddress);
    return asset?.symbol || 'Unknown';
  }, []);

  // Asset'lere göre dinamik maxHops ve slippage hesaplama (Ana sayfa ile aynı)
  const getDynamicTradeParams = useCallback((assetInAddress: string, assetOutAddress: string) => {
    const assetInSymbol = getAssetSymbol(assetInAddress);
    const assetOutSymbol = getAssetSymbol(assetOutAddress);
    
    // Her iki asset için konfigürasyonları al (type-safe)
    const assetInConfig = (ASSET_CONFIGS as any)[assetInSymbol] || DEFAULT_ASSET_CONFIG;
    const assetOutConfig = (ASSET_CONFIGS as any)[assetOutSymbol] || DEFAULT_ASSET_CONFIG;
    
    // En yüksek maxHops ve slippage değerlerini kullan (daha güvenli)
    const maxHops = Math.max(assetInConfig.maxHops, assetOutConfig.maxHops);
    const slippageBps = Math.max(assetInConfig.slippageBps, assetOutConfig.slippageBps);
    
    console.log(`🔧 Dynamic Trade Params:
    - ${assetInSymbol}: maxHops=${assetInConfig.maxHops}, slippage=${assetInConfig.slippageBps}
    - ${assetOutSymbol}: maxHops=${assetOutConfig.maxHops}, slippage=${assetOutConfig.slippageBps}
    - Final: maxHops=${maxHops}, slippage=${slippageBps}`);
    
    return { maxHops, slippageBps };
  }, [getAssetSymbol]);

  // Kullanıcı dostu miktarı stroop'a çevir (7 decimal) - Ana sayfa ile aynı
  const toStroop = (val: string): string => {
    return (parseFloat(val) * 1e7).toFixed(0);
  };

  // Telegram bot yükle
  useEffect(() => {
    const loadTelegramBot = async () => {
      if (typeof window !== 'undefined') {
        try {
          const { telegramBot: bot } = await import('@/lib/telegram');
          setTelegramBot(bot);
          const storedChatId = localStorage.getItem('telegram_chat_id');
          if (storedChatId) setTelegramChatId(storedChatId);
        } catch (error) {
          console.error('Telegram bot yükleme hatası:', error);
        }
      }
    };
    loadTelegramBot();
  }, []);

  // 🔗 Freighter Bağlantı Fonksiyonu (Ana sayfa ile aynı)
  const connectWallet = async (): Promise<void> => {
    try {
      await connect();
    } catch (error) {
      const errorMessage = (error as Error).message;
      console.error('Connect error:', errorMessage);
      
      // Freighter yüklü değilse kullanıcıyı yönlendir
      if (errorMessage.includes('Freighter eklentisi yüklü değil')) {
        alert(`❌ Freighter Eklentisi Gerekli\n\n1. Chrome/Edge için: https://chrome.google.com/webstore/detail/freighter/bcacfldlkkdogcmkkibnjlakofdplcbk\n2. Firefox için: https://addons.mozilla.org/en-US/firefox/addon/freighter/\n\nEklentiyi yükledikten sonra sayfayı yenileyin.`);
        // Kullanıcıyı Freighter yükleme sayfasına yönlendir
        window.open('https://freighter.app/', '_blank');
      } else {
        alert('Freighter bağlantısı başarısız: ' + errorMessage);
      }
    }
  };

  // Bot Balance Kontrolü
  const checkBotBalance = useCallback(async (botPublicKey: string) => {
    try {
      // Stellar balance API call
      const response = await fetch(`https://horizon-testnet.stellar.org/accounts/${botPublicKey}`);
      if (response.ok) {
        const account = await response.json();
        const xlmBalance = account.balances.find((b: any) => b.asset_type === 'native');
        setBotBalance(parseFloat(xlmBalance?.balance || '0'));
      }
    } catch (error) {
      console.error('Bot balance kontrol hatası:', error);
    }
  }, []);

  // 🤖 Bot Wallet Oluşturma/Yükleme
  useEffect(() => {
    const loadBotWallet = () => {
      try {
        const storedWallet = localStorage.getItem('bot_wallet');
        if (storedWallet && publicKey) {
          const wallet = JSON.parse(storedWallet);
          setBotWallet(wallet);
          // Bot balance kontrol et
          checkBotBalance(wallet.publicKey);
        }
        
        // Custom wallet adresini yükle
        const storedCustomAddress = localStorage.getItem('custom_wallet_address');
        if (storedCustomAddress) {
          setCustomWalletAddress(storedCustomAddress);
        }
      } catch (error) {
        console.error('Bot wallet yükleme hatası:', error);
      }
    };
    
    if (publicKey) {
      loadBotWallet();
    }
  }, [publicKey, checkBotBalance]);

  // 🤖 Yeni Bot Wallet Oluşturma
  const createBotWallet = useCallback(async () => {
    try {
      if (!publicKey) {
        throw new Error('Ana cüzdan bağlı değil');
      }

      // Stellar SDK ile yeni keypair oluştur
      const StellarSdk = await import('@stellar/stellar-sdk');
      const keypair = StellarSdk.Keypair.random();
      
      const newBotWallet = {
        publicKey: keypair.publicKey(),
        secretKey: keypair.secret()
      };

      setBotWallet(newBotWallet);
      localStorage.setItem('bot_wallet', JSON.stringify(newBotWallet));
      
      setAutoTradeStatus(`🤖 Bot cüzdanı oluşturuldu!
📍 Bot Address: ${newBotWallet.publicKey}
💰 Bu adrese XLM transfer edin (işlem başına ~0.5-2 XLM yeterli)
🔑 Secret key güvenli şekilde saklandı
⚠️ XLM transfer sonrası bot aktif olacak
🎯 Bot kendi cüzdanından işlem yapacak`);

      // Balance kontrol et
      setTimeout(() => checkBotBalance(newBotWallet.publicKey), 2000);

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen hata';
      alert(`❌ Bot wallet oluşturma hatası: ${errorMessage}`);
    }
  }, [publicKey, checkBotBalance]);



  // 📦 LocalStorage'dan pre-auth orders yükle
  useEffect(() => {
    if (publicKey) {
      try {
        const buyOrder = localStorage.getItem(`preauth_buy_${publicKey}`);
        const sellOrder = localStorage.getItem(`preauth_sell_${publicKey}`);
        const gridBot = localStorage.getItem(`grid_bot_${publicKey}`);
        
        if (buyOrder) {
          const parsed = JSON.parse(buyOrder);
          // Geçerlilik kontrolü
          if (new Date(parsed.expiry) > new Date()) {
            setPreAuthBuyOrder({
              ...parsed,
              expiry: new Date(parsed.expiry)
            });
          } else {
            localStorage.removeItem(`preauth_buy_${publicKey}`);
          }
        }
        
        if (sellOrder) {
          const parsed = JSON.parse(sellOrder);
          // Geçerlilik kontrolü
          if (new Date(parsed.expiry) > new Date()) {
            setPreAuthSellOrder({
              ...parsed,
              expiry: new Date(parsed.expiry)
            });
          } else {
            localStorage.removeItem(`preauth_sell_${publicKey}`);
          }
        }

        if (gridBot) {
          const parsed = JSON.parse(gridBot);
          // Geçerlilik kontrolü
          if (new Date(parsed.expiry) > new Date()) {
            setGridTradingBot({
              ...parsed,
              expiry: new Date(parsed.expiry)
            });
          } else {
            localStorage.removeItem(`grid_bot_${publicKey}`);
          }
        }


      } catch (error) {
        console.error('❌ LocalStorage order loading error:', error);
      }
    }
  }, [publicKey]);

  // 💸 Freighter ile bot'a XLM transfer etme fonksiyonu
  const transferXLMToBot = useCallback(async (requiredXLM: number) => {
    try {
      if (!publicKey || !botWallet || !signTransaction) {
        throw new Error('Wallet bilgileri eksik.');
      }

      // Freighter bağlantısını kontrol et
      if (!isConnected) {
        setAutoTradeStatus('🔗 Freighter bağlantısı gerekli. Yeniden bağlanıyor...');
        try {
          await connect();
          // Bağlantı için kısa bekle
          await new Promise(resolve => setTimeout(resolve, 2000));
          
          if (!isConnected) {
            throw new Error('Freighter bağlantısı kurulamadı. Lütfen tarayıcıda Freighter extension\'ını kontrol edin ve manuel olarak bağlanın.');
          }
        } catch (connectError) {
          throw new Error(`Freighter bağlantı hatası: ${connectError}. Lütfen sayfayı yenileyin ve manuel olarak bağlanın.`);
        }
      }

      setAutoTradeStatus(`💰 Freighter ile ${requiredXLM.toFixed(2)} XLM transfer ediliyor...`);

      // Stellar SDK ile payment transaction oluştur
      const StellarSdk = await import('@stellar/stellar-sdk');
      const server = new StellarSdk.Horizon.Server('https://horizon-testnet.stellar.org');
      
      // Ana cüzdan account bilgilerini al
      const sourceAccount = await server.loadAccount(publicKey);
      
      // Payment transaction oluştur
      const transaction = new StellarSdk.TransactionBuilder(sourceAccount, {
        fee: StellarSdk.BASE_FEE,
        networkPassphrase: StellarSdk.Networks.TESTNET,
      })
      .addOperation(StellarSdk.Operation.payment({
        destination: botWallet.publicKey,
        asset: StellarSdk.Asset.native(),
        amount: requiredXLM.toFixed(7),
      }))
      .setTimeout(180)
      .build();

      // Transaction XDR'ını al
      const xdr = transaction.toEnvelope().toXDR('base64');
      
      setAutoTradeStatus(`🔐 Freighter imzası bekleniyor...`);
      
      // Freighter ile imzala
      const signedXDR = await signTransaction(xdr);
      
      setAutoTradeStatus(`� Transfer gönderiliyor...`);
      
      // İmzalı transaction'ı gönder
      const signedTransaction = new StellarSdk.Transaction(signedXDR, StellarSdk.Networks.TESTNET);
      const result = await server.submitTransaction(signedTransaction);
      
      setAutoTradeStatus(`✅ Transfer başarılı! Hash: ${result.hash}`);
      
      // Bot balance'ını güncelle
      setTimeout(() => checkBotBalance(botWallet.publicKey), 3000);
      
      return { success: true, hash: result.hash };
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Transfer hatası';
      setAutoTradeStatus(`❌ Transfer hatası: ${errorMessage}`);
      return { success: false, error: errorMessage };
    }
  }, [publicKey, botWallet, signTransaction, checkBotBalance, connect, isConnected]);

  // 💸 Bot'dan kullanıcıya XLM iade etme fonksiyonu
  const refundXLMFromBot = useCallback(async (amount: number) => {
    try {
      if (!publicKey || !botWallet) {
        throw new Error('Wallet bilgileri eksik.');
      }

      setAutoTradeStatus(`💸 ${amount.toFixed(2)} XLM iade ediliyor...`);

      const StellarSdk = await import('@stellar/stellar-sdk');
      const server = new StellarSdk.Horizon.Server('https://horizon-testnet.stellar.org');
      
      // Bot account bilgilerini al
      const botAccount = await server.loadAccount(botWallet.publicKey);
      const botKeypair = StellarSdk.Keypair.fromSecret(botWallet.secretKey);
      
      // İade transaction oluştur
      const transaction = new StellarSdk.TransactionBuilder(botAccount, {
        fee: StellarSdk.BASE_FEE,
        networkPassphrase: StellarSdk.Networks.TESTNET,
      })
      .addOperation(StellarSdk.Operation.payment({
        destination: publicKey,
        asset: StellarSdk.Asset.native(),
        amount: amount.toFixed(7),
      }))
      .setTimeout(180)
      .build();

      // Bot imza at
      transaction.sign(botKeypair);
      
      // Gönder
      const result = await server.submitTransaction(transaction);
      
      setAutoTradeStatus(`✅ İade tamamlandı! Hash: ${result.hash}`);
      
      // Bot balance'ını güncelle
      setTimeout(() => checkBotBalance(botWallet.publicKey), 3000);
      
      return { success: true, hash: result.hash };
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'İade hatası';
      setAutoTradeStatus(`❌ İade hatası: ${errorMessage}`);
      return { success: false, error: errorMessage };
    }
  }, [publicKey, botWallet, checkBotBalance]);

  // 🎯 Pre-Authorization Functions (Manuel ve Bot Modları)
  const createPreAuthBuyOrder = useCallback(async (useBot = false) => {
    try {
      if (!buyTargetPrice || !autoBuyAmount) {
        throw new Error('Hedef fiyat ve miktar giriniz.');
      }

      if (!publicKey || !isConnected) {
        throw new Error('Cüzdan bağlı değil.');
      }

      const numAmount = parseFloat(autoBuyAmount);
      const assetInSymbol = ASSET_OPTIONS.find(a => a.value === autoTradeAssetIn)?.symbol;
      const assetOutSymbol = ASSET_OPTIONS.find(a => a.value === autoTradeAssetOut)?.symbol;

      if (!useBot || botMode === 'manual') {
        // 👤 Manuel Mod - Basit onay sistemi
        const confirmed = window.confirm(
          `👤 MANUEL ALIM EMRİ ONAY\n\n` +
          `💰 Harcayacağınız: ${autoBuyAmount} ${assetInSymbol}\n` +
          `📊 Hedef Fiyat: $${buyTargetPrice}\n` +
          `💵 Güncel Fiyat: $${displayPrice.toFixed(4)}\n\n` +
          `👤 Manuel modda her işlemde Freighter ile imza atacaksınız\n` +
          `💰 Para ana cüzdanınızdan çıkacak\n\n` +
          `Bu alım emrini onaylıyor musunuz?`
        );

        if (!confirmed) {
          setAutoTradeStatus('❌ Manuel alım emri iptal edildi.');
          return;
        }

        // Manuel pre-auth order oluştur
        const order = {
          targetPrice: buyTargetPrice,
          amount: autoBuyAmount,
          expiry: new Date(Date.now() + 2 * 60 * 60 * 1000), // 2 saat geçerli
          status: `✅ MANUEL ALIM EMRİ AKTİF!
💰 Harcayacak: ${autoBuyAmount} ${assetInSymbol}
🎯 Hedef Fiyat: $${buyTargetPrice}
👤 Manuel Mod: Her işlemde imza gerekir
⏰ Geçerlilik: 2 saat
📊 Fiyat takibi aktif...`
        };

        setPreAuthBuyOrder(order);
        localStorage.setItem(`preauth_buy_${publicKey}`, JSON.stringify(order));
        setAutoTradeStatus('✅ Manuel alım emri aktif! Hedef fiyat bekliyor...');

      } else if (useBot && botMode === 'auto' && botWallet) {
        // Bot Mod - Alım için gerekli XLM miktarını hesapla
        setAutoTradeStatus('💰 Bot alım için gerekli XLM hesaplanıyor...');
        
        // Gerçek işlem maliyeti: satın alınacak XLM + işlem ücretleri
        const baseAmount = numAmount; // Satın almak istenen XLM miktarı
        const transactionFees = 0.5; // Stellar network fees (100,000 stroops = 0.01 XLM) + buffer
        const slippageBuffer = baseAmount * 0.02; // %2 slippage buffer
        const requiredXLM = baseAmount + transactionFees + slippageBuffer;

        // Quote al tahmini çıktı için (Ana sayfa ile aynı parametreler)
        try {
          const { maxHops, slippageBps } = getDynamicTradeParams(autoTradeAssetIn, autoTradeAssetOut);
          
          const quoteResponse = await soroswapAPI.getQuote({
            assetIn: autoTradeAssetIn,
            assetOut: autoTradeAssetOut,
            amount: toStroop(autoBuyAmount),
            tradeType: 'EXACT_IN' as const,
            protocols: DEFAULT_PROTOCOLS,
            slippageBps: slippageBps, // Dinamik slippage
            feeBps: 50,
            parts: 1,
            maxHops: maxHops // Dinamik maxHops
          });

          const estimatedOutput = parseFloat(quoteResponse.amountOut || '0') / 10000000;

          // Bot onayı al
          const confirmed = window.confirm(
            `🤖 BOT ALIM EMRİ ONAY\n\n` +
            `💰 Harcayacağınız: ${autoBuyAmount} ${assetInSymbol}\n` +
            `🎯 Alacağınız (tahmini): ${estimatedOutput.toFixed(4)} ${assetOutSymbol}\n` +
            `📊 Hedef Fiyat: $${buyTargetPrice}\n` +
            `💵 Güncel Fiyat: $${currentPrice.toFixed(4)}\n\n` +
            `🔗 Freighter ile ${requiredXLM.toFixed(2)} XLM bot'a transfer edilecek\n` +
            `🤖 Bot PC'niz kapalıyken otomatik trade yapacak\n` +
            `💸 İşlem sonrası ${assetOutSymbol} cüzdanınıza gelecek\n` +
            `❌ İptal ederseniz XLM iade edilecek\n\n` +
            `Bu bot alım emrini onaylıyor musunuz?`
          );

          if (!confirmed) {
            setAutoTradeStatus('❌ Bot alım emri iptal edildi.');
            return;
          }

          // Freighter bağlantısını kontrol et ve gerekirse yeniden bağlan
          setAutoTradeStatus('🔗 Freighter bağlantısı kontrol ediliyor...');
          
          try {
            // Freighter'a yeniden bağlanmayı dene
            if (!isConnected) {
              setAutoTradeStatus('🔗 Freighter\'a bağlanıyor...');
              await connect();
              
              // Bağlantı kontrolü için kısa bekle
              await new Promise(resolve => setTimeout(resolve, 1000));
              
              if (!isConnected) {
                throw new Error('Freighter bağlantısı kurulamadı. Lütfen manuel olarak bağlanın.');
              }
            }
            
            setAutoTradeStatus(`💸 ${requiredXLM.toFixed(2)} XLM bot wallet'a transfer ediliyor...`);
            
            // Freighter ile bot'a XLM transfer et
            const transferResult = await transferXLMToBot(requiredXLM);
            
            if (!transferResult.success) {
              throw new Error(transferResult.error || 'XLM transfer başarısız');
            }
            
            setAutoTradeStatus('✅ XLM transfer başarılı! Bot alım emri oluşturuluyor...');

            // Bot pre-auth order oluştur
            const order = {
              targetPrice: buyTargetPrice,
              amount: autoBuyAmount,
              requiredXLM: requiredXLM,
              estimatedOutput: estimatedOutput,
              transferHash: transferResult.hash,
              expiry: new Date(Date.now() + 2 * 60 * 60 * 1000), // 2 saat geçerli
              isBot: true,
              status: `✅ BOT ALIM EMRİ AKTİF!
💰 Harcayacak: ${autoBuyAmount} ${assetInSymbol}
🎯 Hedef Fiyat: $${buyTargetPrice}
💸 Alacak Token: ~${estimatedOutput.toFixed(4)} ${assetOutSymbol}
🤖 Bot Hazır: ${requiredXLM.toFixed(2)} XLM transfer edildi
💳 Transfer Hash: ${transferResult.hash}
⏰ Geçerlilik: 2 saat
📊 PC kapalı olabilir - Bot otomatik takip!`
            };

            setPreAuthBuyOrder(order);
            localStorage.setItem(`preauth_buy_${publicKey}`, JSON.stringify(order));
            setAutoTradeStatus('✅ Bot alım emri aktif! Hedef fiyat bekliyor...');

          } catch (transferError) {
            setAutoTradeStatus(`❌ Transfer hatası: ${transferError}`);
            return;
          }

        } catch (quoteError) {
          // Quote alamazsak basit onay
          console.error('Quote hatası:', quoteError);
          setAutoTradeStatus('⚠️ Quote alınamadı, basit bot alım emri oluşturuluyor...');
          
          const confirmed = window.confirm(
            `🤖 BOT ALIM EMRİ ONAY (Basit)\n\n` +
            `💰 Harcayacağınız: ${autoBuyAmount} ${assetInSymbol}\n` +
            `🎯 Hedef Fiyat: $${buyTargetPrice}\n` +
            `💵 Güncel Fiyat: $${currentPrice.toFixed(4)}\n\n` +
            `Bu bot alım emrini onaylıyor musunuz?`
          );

          if (!confirmed) {
            setAutoTradeStatus('❌ Bot alım emri iptal edildi.');
            return;
          }

          try {
            const transferResult = await transferXLMToBot(requiredXLM);
            
            if (!transferResult.success) {
              setAutoTradeStatus('❌ XLM transfer başarısız.');
              return;
            }

            const order = {
              targetPrice: buyTargetPrice,
              amount: autoBuyAmount,
              requiredXLM: requiredXLM,
              transferHash: transferResult.hash,
              expiry: new Date(Date.now() + 2 * 60 * 60 * 1000),
              isBot: true,
              status: `✅ BOT ALIM EMRİ AKTİF!
💰 Harcayacak: ${autoBuyAmount} ${assetInSymbol}
🎯 Hedef: $${buyTargetPrice}
🤖 Bot Hazır: ${requiredXLM.toFixed(2)} XLM yatırıldı
💳 Transfer Hash: ${transferResult.hash}
⏰ Geçerlilik: 2 saat`
            };

            setPreAuthBuyOrder(order);
            localStorage.setItem(`preauth_buy_${publicKey}`, JSON.stringify(order));
            setAutoTradeStatus('✅ Bot alım emri aktif! Hedef fiyat bekliyor...');
            
          } catch (transferError) {
            setAutoTradeStatus(`❌ Transfer hatası: ${transferError}`);
            return;
          }
        }
      } else {
        throw new Error('Bot modu seçildi ama bot wallet oluşturulmamış. Önce bot wallet oluşturun.');
      }

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen hata';
      setAutoTradeStatus(`❌ Alım onayı hatası: ${errorMessage}`);
    }
  }, [buyTargetPrice, autoBuyAmount, publicKey, isConnected, currentPrice, displayPrice, autoTradeAssetIn, autoTradeAssetOut, botMode, botWallet, transferXLMToBot, connect, getDynamicTradeParams]);

  const createPreAuthSellOrder = useCallback(async (useBot = false) => {
    try {
      if (!sellTargetPrice || !autoSellAmount) {
        throw new Error('Hedef fiyat ve miktar giriniz.');
      }

      if (!publicKey || !isConnected) {
        throw new Error('Cüzdan bağlı değil.');
      }

      const numAmount = parseFloat(autoSellAmount);
      const assetInSymbol = ASSET_OPTIONS.find(a => a.value === autoTradeAssetIn)?.symbol;
      const assetOutSymbol = ASSET_OPTIONS.find(a => a.value === autoTradeAssetOut)?.symbol;

      if (!useBot || botMode === 'manual') {
        // 👤 Manuel Mod - Basit onay sistemi
        const confirmed = window.confirm(
          `👤 MANUEL SATIM EMRİ ONAY\n\n` +
          `💸 Satacağınız: ${autoSellAmount} ${assetInSymbol}\n` +
          `📊 Hedef Fiyat: $${sellTargetPrice}\n` +
          `💵 Güncel Fiyat: $${currentPrice.toFixed(4)}\n\n` +
          `👤 Manuel modda her işlemde Freighter ile imza atacaksınız\n` +
          `💰 Token ana cüzdanınızdan çıkacak\n\n` +
          `Bu satım emrini onaylıyor musunuz?`
        );

        if (!confirmed) {
          setAutoTradeStatus('❌ Manuel satım emri iptal edildi.');
          return;
        }

        // Manuel pre-auth order oluştur
        const order = {
          targetPrice: sellTargetPrice,
          amount: autoSellAmount,
          expiry: new Date(Date.now() + 2 * 60 * 60 * 1000), // 2 saat geçerli
          status: `✅ MANUEL SATIM EMRİ AKTİF!
💸 Satacak: ${autoSellAmount} ${assetInSymbol}
🎯 Hedef Fiyat: $${sellTargetPrice}
👤 Manuel Mod: Her işlemde imza gerekir
⏰ Geçerlilik: 2 saat
📊 Fiyat takibi aktif...`
        };

        setPreAuthSellOrder(order);
        localStorage.setItem(`preauth_sell_${publicKey}`, JSON.stringify(order));
        setAutoTradeStatus('✅ Manuel satım emri aktif! Hedef fiyat bekliyor...');

      } else if (useBot && botMode === 'auto' && botWallet) {
        // 🤖 Bot Mod - Satım için gereken asset'i bot'a transfer et
        setAutoTradeStatus('💰 Bot satım için gerekli token miktarı hesaplanıyor...');
        
        // Satım için gereken token miktarı = satılacak miktar + işlem ücreti
        const requiredTokenAmount = numAmount; // Ana token miktarı
        const requiredXLMForFees = 2; // Stellar transaction fees için

        // Quote al tahmini çıktı için (Ana sayfa ile aynı parametreler)
        try {
          const { maxHops, slippageBps } = getDynamicTradeParams(autoTradeAssetIn, autoTradeAssetOut);
          
          const quoteResponse = await soroswapAPI.getQuote({
            assetIn: autoTradeAssetIn,
            assetOut: autoTradeAssetOut,
            amount: toStroop(autoSellAmount),
            tradeType: 'EXACT_IN' as const,
            protocols: DEFAULT_PROTOCOLS,
            slippageBps: slippageBps, // Dinamik slippage
            feeBps: 50,
            parts: 1,
            maxHops: maxHops // Dinamik maxHops
          });

          const estimatedOutput = parseFloat(quoteResponse.amountOut || '0') / 10000000;

          // Bot onayı al
          const confirmed = window.confirm(
            `🤖 BOT SATIM EMRİ ONAY\n\n` +
            `💸 Satacağınız: ${autoSellAmount} ${assetInSymbol}\n` +
            `🎯 Alacağınız (tahmini): ${estimatedOutput.toFixed(4)} ${assetOutSymbol}\n` +
            `📊 Hedef Fiyat: $${sellTargetPrice}\n` +
            `💵 Güncel Fiyat: $${currentPrice.toFixed(4)}\n\n` +
            `🔗 Freighter ile ${requiredXLMForFees.toFixed(2)} XLM işlem ücreti bot'a gönderilecek\n` +
            `📤 Satılacak ${assetInSymbol} tokenlar manuel olarak bot'a transfer edilmeli\n` +
            `🤖 Bot PC'niz kapalıyken otomatik trade yapacak\n` +
            `💸 İşlem sonrası ${assetOutSymbol} cüzdanınıza gelecek\n` +
            `❌ İptal ederseniz transfer edilen ücret iade edilecek\n\n` +
            `Bu bot satım emrini onaylıyor musunuz?`
          );

          if (!confirmed) {
            setAutoTradeStatus('❌ Bot satım emri iptal edildi.');
            return;
          }

          // Freighter bağlantısını kontrol et ve gerekirse yeniden bağlan
          setAutoTradeStatus('🔗 Freighter bağlantısı kontrol ediliyor...');
          
          try {
            // Freighter'a yeniden bağlanmayı dene
            if (!isConnected) {
              setAutoTradeStatus('🔗 Freighter\'a bağlanıyor...');
              await connect();
              
              // Bağlantı kontrolü için kısa bekle
              await new Promise(resolve => setTimeout(resolve, 1000));
              
              if (!isConnected) {
                throw new Error('Freighter bağlantısı kurulamadı. Lütfen manuel olarak bağlanın.');
              }
            }
            
            setAutoTradeStatus(`💸 ${requiredXLMForFees.toFixed(2)} XLM işlem ücreti bot wallet'a transfer ediliyor...`);
            
            // Freighter ile bot'a sadece işlem ücreti (XLM) transfer et
            const transferResult = await transferXLMToBot(requiredXLMForFees);
            
            if (!transferResult.success) {
              throw new Error(transferResult.error || 'XLM transfer başarısız');
            }
            
            setAutoTradeStatus(`✅ XLM transfer başarılı! Bot satım emri oluşturuluyor...\n\n⚠️ ÖNEMLİ: Şimdi ${requiredTokenAmount} ${assetInSymbol} tokenlarını bot adresine manuel transfer edin:\n${botWallet.publicKey}`);

            // Bot pre-auth order oluştur
            const order = {
              targetPrice: sellTargetPrice,
              amount: autoSellAmount,
              requiredXLM: requiredXLMForFees,
              requiredTokenAmount: requiredTokenAmount,
              estimatedOutput: estimatedOutput,
              transferHash: transferResult.hash,
              expiry: new Date(Date.now() + 2 * 60 * 60 * 1000), // 2 saat geçerli
              isBot: true,
              status: `✅ BOT SATIM EMRİ AKTİF!
💸 Satacak: ${autoSellAmount} ${assetInSymbol}
🎯 Hedef Fiyat: $${sellTargetPrice}
💸 Alacak Token: ~${estimatedOutput.toFixed(4)} ${assetOutSymbol}
🤖 Bot Hazır: ${requiredXLMForFees.toFixed(2)} XLM işlem ücreti yatırıldı
� Transfer Hash: ${transferResult.hash}
⚠️ MANUEL: ${requiredTokenAmount} ${assetInSymbol} bot'a transfer edin!
🏦 Bot Adresi: ${botWallet.publicKey}
⏰ Geçerlilik: 2 saat
📊 PC kapalı olabilir - Bot otomatik takip!`
            };

            setPreAuthSellOrder(order);
            localStorage.setItem(`preauth_sell_${publicKey}`, JSON.stringify(order));
            setAutoTradeStatus('✅ Bot satım emri aktif! Tokenları bot adresine transfer edin ve hedef fiyat bekliyor...');

          } catch (transferError) {
            setAutoTradeStatus(`❌ Transfer hatası: ${transferError}`);
            return;
          }

        } catch (quoteError) {
          // Quote alamazsak basit onay
          console.error('Quote hatası:', quoteError);
          setAutoTradeStatus('⚠️ Quote alınamadı, basit bot satım emri oluşturuluyor...');
          
          const confirmed = window.confirm(
            `🤖 BOT SATIM EMRİ ONAY (Basit)\n\n` +
            `💸 Satacağınız: ${autoSellAmount} ${assetInSymbol}\n` +
            `🎯 Hedef Fiyat: $${sellTargetPrice}\n` +
            `💵 Güncel Fiyat: $${currentPrice.toFixed(4)}\n\n` +
            `Bu bot satım emrini onaylıyor musunuz?`
          );

          if (!confirmed) {
            setAutoTradeStatus('❌ Bot satım emri iptal edildi.');
            return;
          }

          try {
            const transferResult = await transferXLMToBot(requiredXLMForFees);
            
            if (!transferResult.success) {
              setAutoTradeStatus('❌ XLM transfer başarısız.');
              return;
            }

            const order = {
              targetPrice: sellTargetPrice,
              amount: autoSellAmount,
              requiredXLM: requiredXLMForFees,
              requiredTokenAmount: requiredTokenAmount,
              transferHash: transferResult.hash,
              expiry: new Date(Date.now() + 2 * 60 * 60 * 1000),
              isBot: true,
              status: `✅ BOT SATIM EMRİ AKTİF!
💸 Satacak: ${autoSellAmount} ${assetInSymbol}
🎯 Hedef: $${sellTargetPrice}
🤖 Bot Hazır: ${requiredXLMForFees.toFixed(2)} XLM işlem ücreti yatırıldı
💳 Transfer Hash: ${transferResult.hash}
⚠️ MANUEL: ${requiredTokenAmount} ${assetInSymbol} bot'a transfer edin!
⏰ Geçerlilik: 2 saat`
            };

            setPreAuthSellOrder(order);
            localStorage.setItem(`preauth_sell_${publicKey}`, JSON.stringify(order));
            setAutoTradeStatus('✅ Bot satım emri aktif! Tokenları transfer edin ve hedef fiyat bekliyor...');
            
          } catch (transferError) {
            setAutoTradeStatus(`❌ Transfer hatası: ${transferError}`);
            return;
          }
        }
      } else {
        throw new Error('Bot modu seçildi ama bot wallet oluşturulmamış. Önce bot wallet oluşturun.');
      }

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen hata';
      setAutoTradeStatus(`❌ Satım onayı hatası: ${errorMessage}`);
    }
  }, [sellTargetPrice, autoSellAmount, publicKey, isConnected, currentPrice, autoTradeAssetIn, autoTradeAssetOut, botMode, botWallet, transferXLMToBot, connect, getDynamicTradeParams]);

  // 🤖 Grid Trading Bot - Otomatik Alım + Satım Fonksiyonu
  const createGridTradingBot = useCallback(async (useBot = false) => {
    try {
      if (!gridBuyPrice || !gridSellPrice || !gridAmount) {
        throw new Error('Alım fiyatı, satım fiyatı ve miktar giriniz.');
      }

      if (!publicKey || !isConnected) {
        throw new Error('Cüzdan bağlı değil.');
      }

      const buyPrice = parseFloat(gridBuyPrice);
      const sellPrice = parseFloat(gridSellPrice);
      const amount = parseFloat(gridAmount);

      if (buyPrice >= sellPrice) {
        throw new Error('Alım fiyatı satım fiyatından düşük olmalıdır.');
      }

      if (buyPrice <= 0 || sellPrice <= 0 || amount <= 0) {
        throw new Error('Tüm değerler pozitif olmalıdır.');
      }

      const assetInSymbol = ASSET_OPTIONS.find(a => a.value === autoTradeAssetIn)?.symbol;
      const assetOutSymbol = ASSET_OPTIONS.find(a => a.value === autoTradeAssetOut)?.symbol;

      if (!useBot || botMode === 'manual') {
        // 👤 Manuel Grid Trading Bot
        const confirmed = window.confirm(
          `👤 MANUEL GRID TRADING BOT ONAY\n\n` +
          `� İŞLEM SIRASI (Otomatik Döngü):\n` +
          `1️⃣ ALIM: Fiyat $${gridBuyPrice}'a düştüğünde (≤ eşit veya altında)\n` +
          `   → ${gridAmount} ${assetInSymbol} alınacak\n` +
          `2️⃣ SATIM: Alım sonrası fiyat $${gridSellPrice}'a çıktığında (≥ eşit veya üstünde)\n` +
          `   → Alınan tokenlar satılacak\n` +
          `3️⃣ KAR: Kazanç ana cüzdanınıza transfer edilecek\n\n` +
          `📊 Alım Fiyatı: $${gridBuyPrice}\n` +
          `📊 Satım Fiyatı: $${gridSellPrice}\n` +
          `💰 İşlem Miktarı: ${gridAmount} ${assetInSymbol}\n` +
          `📈 Kar Beklentisi: ${((sellPrice - buyPrice) / buyPrice * 100).toFixed(2)}%\n\n` +
          `👤 Manuel modda her işlemde Freighter ile imza atacaksınız\n` +
          `⚠️ ÖNEMLİ: İlk önce ALIM, sonra SATIM gerçekleşir\n\n` +
          `Bu grid trading bot'unu onaylıyor musunuz?`
        );

        if (!confirmed) {
          setAutoTradeStatus('❌ Manuel grid trading bot iptal edildi.');
          return;
        }

        // Manuel grid bot oluştur
        const gridBot = {
          buyPrice: gridBuyPrice,
          sellPrice: gridSellPrice,
          amount: gridAmount,
          isActive: true,
          currentStep: 'waiting_buy' as const,
          expiry: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 saat geçerli
          status: `✅ MANUEL GRID BOT AKTİF!
🔄 İŞLEM SIRASI (Otomatik Döngü):
1️⃣ ALIM AŞAMASI: Fiyat ≤ $${gridBuyPrice} (eşit veya altında) → ${gridAmount} ${assetInSymbol} alım
2️⃣ SATIM AŞAMASI: Alım sonrası fiyat ≥ $${gridSellPrice} (eşit veya üstünde) → Satım
3️⃣ KAR TRANSFERİ: Kazanç cüzdanınıza transfer

💰 Miktar: ${gridAmount} ${assetInSymbol}
📈 Beklenen Kar: ${((sellPrice - buyPrice) / buyPrice * 100).toFixed(2)}%
👤 Manuel Mod: Her işlemde imza gerekir
📊 ŞU ANDA: 1️⃣ Alım fiyatı bekleniyor ($${gridBuyPrice} ve altı)
⏰ Geçerlilik: 24 saat`
        };

        setGridTradingBot(gridBot);
        localStorage.setItem(`grid_bot_${publicKey}`, JSON.stringify(gridBot));
        setAutoTradeStatus('✅ Manuel grid trading bot aktif! Alım fiyatı bekleniyor...');

      } else if (useBot && botMode === 'auto' && botWallet) {
        // 🤖 Otomatik Grid Trading Bot
        setAutoTradeStatus('💰 Grid bot için gerekli XLM hesaplanıyor...');
        
        // Grid bot için gerekli XLM: alım tutarı + işlem ücretleri + buffer
        const baseAmount = amount; // Alınacak miktar
        const transactionFees = 1; // İki işlem için (buy + sell)
        const slippageBuffer = baseAmount * 0.02; // %2 slippage buffer
        const requiredXLM = baseAmount + transactionFees + slippageBuffer;

        try {
          // Quote al tahmini çıktı için - RETRY MEKANİZMASI
          const { maxHops, slippageBps } = getDynamicTradeParams(autoTradeAssetIn, autoTradeAssetOut);
          
          let quoteResponse: any;
          let retryCount = 0;
          const maxRetries = 3;
          
          while (retryCount < maxRetries) {
            try {
              setAutoTradeStatus(`💰 Grid bot için quote alınıyor... (Deneme ${retryCount + 1}/${maxRetries})`);
              
              quoteResponse = await Promise.race([
                soroswapAPI.getQuote({
                  assetIn: autoTradeAssetIn,
                  assetOut: autoTradeAssetOut,
                  amount: toStroop(gridAmount),
                  tradeType: 'EXACT_IN' as const,
                  protocols: DEFAULT_PROTOCOLS,
                  slippageBps: slippageBps,
                  feeBps: 50,
                  parts: 1,
                  maxHops: maxHops
                }),
                new Promise((_, reject) => 
                  setTimeout(() => reject(new Error(`Grid bot quote timeout (${20 + (retryCount * 10)} saniye)`)), 20000 + (retryCount * 10000))
                )
              ]) as any;
              
              // Başarılı olursa döngüden çık
              break;
              
            } catch (quoteError) {
              retryCount++;
              console.error(`Grid bot quote deneme ${retryCount} hatası:`, quoteError);
              
              if (retryCount >= maxRetries) {
                throw new Error(`Grid bot quote API ${maxRetries} deneme sonrası başarısız: ${quoteError instanceof Error ? quoteError.message : 'Bilinmeyen hata'}`);
              }
              
              // Bir sonraki deneme için bekle
              setAutoTradeStatus(`⏳ Quote hatası, ${2 * retryCount} saniye sonra tekrar denenecek...`);
              await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));
            }
          }

          const estimatedOutput = parseFloat(quoteResponse.amountOut || '0') / 10000000;

          // Grid bot onayı al
          const confirmed = window.confirm(
            `🤖 OTOMATIK GRID TRADING BOT ONAY\n\n` +
            `� OTOMATİK İŞLEM SIRASI:\n` +
            `1️⃣ ALIM AŞAMASI: Fiyat $${gridBuyPrice}'a düştüğünde (≤ eşit veya altında)\n` +
            `   → ${gridAmount} ${assetInSymbol} otomatik alım\n` +
            `   → Tahmini: ${estimatedOutput.toFixed(4)} ${assetOutSymbol} alınacak\n` +
            `2️⃣ SATIM AŞAMASI: Alım sonrası fiyat $${gridSellPrice}'a çıktığında (≥ eşit veya üstünde)\n` +
            `   → Alınan tokenlar otomatik satım\n` +
            `3️⃣ KAR TRANSFERİ: Kazanç otomatik olarak cüzdanınıza transfer\n\n` +
            `📊 Alım Fiyatı: $${gridBuyPrice}\n` +
            `📊 Satım Fiyatı: $${gridSellPrice}\n` +
            `💰 İşlem Miktarı: ${gridAmount} ${assetInSymbol}\n` +
            `📈 Kar Beklentisi: ${((sellPrice - buyPrice) / buyPrice * 100).toFixed(2)}%\n\n` +
            `🔗 ${requiredXLM.toFixed(2)} XLM bot'a transfer edilecek\n` +
            `🤖 Bot PC'niz kapalıyken çalışacak\n` +
            `💸 Tüm işlemler otomatik gerçekleşecek\n` +
            `⚠️ ÖNEMLİ: İlk önce ALIM, sonra SATIM gerçekleşir\n\n` +
            `Bu otomatik grid trading bot'unu onaylıyor musunuz?`
          );

          if (!confirmed) {
            setAutoTradeStatus('❌ Otomatik grid trading bot iptal edildi.');
            return;
          }

          // Freighter bağlantısını kontrol et
          setAutoTradeStatus('🔗 Freighter bağlantısı kontrol ediliyor...');
          
          if (!isConnected) {
            setAutoTradeStatus('🔗 Freighter\'a bağlanıyor...');
            await connect();
            
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            if (!isConnected) {
              throw new Error('Freighter bağlantısı kurulamadı. Lütfen manuel olarak bağlanın.');
            }
          }
          
          setAutoTradeStatus(`💸 ${requiredXLM.toFixed(2)} XLM grid bot wallet'a transfer ediliyor...`);
          
          // Freighter ile bot'a XLM transfer et
          const transferResult = await transferXLMToBot(requiredXLM);
          
          if (!transferResult.success) {
            throw new Error(transferResult.error || 'XLM transfer başarısız');
          }
          
          setAutoTradeStatus('✅ XLM transfer başarılı! Grid trading bot oluşturuluyor...');

          // Otomatik grid bot oluştur
          const gridBot = {
            buyPrice: gridBuyPrice,
            sellPrice: gridSellPrice,
            amount: gridAmount,
            isActive: true,
            currentStep: 'waiting_buy' as const,
            expiry: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 saat geçerli
            isBot: true,
            status: `✅ OTOMATIK GRID BOT AKTİF!
🔄 OTOMATİK İŞLEM SIRASI:
1️⃣ ALIM AŞAMASI: Fiyat ≤ $${gridBuyPrice} (eşit veya altında) → ${gridAmount} ${assetInSymbol} otomatik alım
2️⃣ SATIM AŞAMASI: Alım sonrası fiyat ≥ $${gridSellPrice} (eşit veya üstünde) → Otomatik satım  
3️⃣ KAR TRANSFERİ: Kazanç otomatik cüzdanınıza transfer

💰 Miktar: ${gridAmount} ${assetInSymbol}
🎯 Tahmini Alım: ${estimatedOutput.toFixed(4)} ${assetOutSymbol}
📈 Beklenen Kar: ${((sellPrice - buyPrice) / buyPrice * 100).toFixed(2)}%
🤖 Bot Hazır: ${requiredXLM.toFixed(2)} XLM transfer edildi
💳 Transfer Hash: ${transferResult.hash}
📊 ŞU ANDA: 1️⃣ Alım fiyatı bekleniyor ($${gridBuyPrice} ve altı)
⏰ Geçerlilik: 24 saat
🔄 PC kapalı olabilir - Bot otomatik döngü!`
          };

          setGridTradingBot(gridBot);
          localStorage.setItem(`grid_bot_${publicKey}`, JSON.stringify(gridBot));
          setAutoTradeStatus('✅ Otomatik grid trading bot aktif! Alım fiyatı bekleniyor...');

        } catch (quoteError) {
          // Quote alamazsak basit grid bot oluştur
          console.error('Grid bot quote hatası:', quoteError);
          setAutoTradeStatus('⚠️ Quote alınamadı, basit grid bot oluşturuluyor...');
          
          const confirmed = window.confirm(
            `🤖 GRID BOT ONAY (Quote Alınamadı)\n\n` +
            `📊 Alım Fiyatı: $${gridBuyPrice}\n` +
            `📊 Satım Fiyatı: $${gridSellPrice}\n` +
            `💰 İşlem Miktarı: ${gridAmount} ${assetInSymbol}\n` +
            `📈 Kar Beklentisi: ${((sellPrice - buyPrice) / buyPrice * 100).toFixed(2)}%\n\n` +
            `⚠️ Soroswap API'den quote alınamadı, basit mod ile devam edilsin mi?\n` +
            `🔄 Grid bot çalışacak ancak tahmini çıktı hesaplanamadı\n\n` +
            `Bu grid bot'unu yine de oluşturmak istiyor musunuz?`
          );

          if (!confirmed) {
            setAutoTradeStatus('❌ Grid bot oluşturma iptal edildi.');
            return;
          }

          try {
            // Freighter bağlantısını kontrol et
            if (!isConnected) {
              setAutoTradeStatus('🔗 Freighter\'a bağlanıyor...');
              await connect();
              await new Promise(resolve => setTimeout(resolve, 1000));
              
              if (!isConnected) {
                throw new Error('Freighter bağlantısı kurulamadı. Lütfen manuel olarak bağlanın.');
              }
            }
            
            setAutoTradeStatus(`💸 ${requiredXLM.toFixed(2)} XLM grid bot wallet'a transfer ediliyor...`);
            
            const transferResult = await transferXLMToBot(requiredXLM);
            
            if (!transferResult.success) {
              throw new Error(transferResult.error || 'XLM transfer başarısız');
            }

            // Basit grid bot oluştur (quote olmadan)
            const gridBot = {
              buyPrice: gridBuyPrice,
              sellPrice: gridSellPrice,
              amount: gridAmount,
              isActive: true,
              currentStep: 'waiting_buy' as const,
              expiry: new Date(Date.now() + 24 * 60 * 60 * 1000),
              isBot: true,
              status: `✅ GRID BOT AKTİF (Basit Mod)!
🎯 Alım Hedefi: $${gridBuyPrice} (≤ eşit veya altında)
🎯 Satım Hedefi: $${gridSellPrice} (≥ eşit veya üstünde)
💰 Miktar: ${gridAmount} ${assetInSymbol}
📈 Beklenen Kar: ${((sellPrice - buyPrice) / buyPrice * 100).toFixed(2)}%
🤖 Bot Hazır: ${requiredXLM.toFixed(2)} XLM transfer edildi
💳 Transfer Hash: ${transferResult.hash}
⚠️ Quote alınamadı - Basit mod aktif
📊 Durum: Alım fiyatı bekleniyor ($${gridBuyPrice} ve altı)
⏰ Geçerlilik: 24 saat
🔄 PC kapalı olabilir - Bot otomatik döngü!`
            };

            setGridTradingBot(gridBot);
            localStorage.setItem(`grid_bot_${publicKey}`, JSON.stringify(gridBot));
            setAutoTradeStatus('✅ Grid bot aktif! (Basit mod) Alım fiyatı bekleniyor...');
            
          } catch (transferError) {
            setAutoTradeStatus(`❌ Transfer hatası: ${transferError}`);
            return;
          }
        }
      } else {
        throw new Error('Bot modu seçildi ama bot wallet oluşturulmamış. Önce bot wallet oluşturun.');
      }

      // Input alanlarını temizle
      setGridBuyPrice('');
      setGridSellPrice('');
      setGridAmount('');

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen hata';
      setAutoTradeStatus(`❌ Grid bot oluşturma hatası: ${errorMessage}`);
    }
  }, [gridBuyPrice, gridSellPrice, gridAmount, publicKey, isConnected, autoTradeAssetIn, autoTradeAssetOut, botMode, botWallet, transferXLMToBot, connect, getDynamicTradeParams]);



  // 💸 Bot kazancını ana cüzdana transfer etme fonksiyonu
  const transferProfitToMainWallet = useCallback(async (
    assetToTransfer: string, 
    fromBotWallet: { publicKey: string; secretKey: string }, 
    toMainWallet: string
  ) => {
    try {
      console.log('🔍 Transfer başlatılıyor:', {
        assetToTransfer,
        fromBot: fromBotWallet.publicKey,
        toWallet: toMainWallet
      });

      const StellarSdk = await import('@stellar/stellar-sdk');
      
      // Bot account bilgilerini al
      const response = await fetch(`https://horizon-testnet.stellar.org/accounts/${fromBotWallet.publicKey}`);
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Bot account bilgisi alınamadı: ${response.status} - ${errorText}`);
      }
      
      const account = await response.json();
      console.log('🤖 Bot account balances:', account.balances);
      
      // Transfer edilecek asset balance'ını bul
      const assetBalance = account.balances.find((balance: any) => {
        if (assetToTransfer.includes('native')) {
          return balance.asset_type === 'native';
        } else {
          // Contract asset için - EXACT MATCH öncelik
          const assetParts = assetToTransfer.split('_');
          const expectedAssetCode = assetParts[0];
          const expectedAssetIssuer = assetParts[1];
          
          // 1. Önce exact match dene
          if (expectedAssetCode && expectedAssetIssuer && balance.asset_code && balance.asset_issuer) {
            const exactMatch = balance.asset_code === expectedAssetCode && balance.asset_issuer === expectedAssetIssuer;
            if (exactMatch) {
              console.log('✅ Exact asset match found:', balance.asset_code, balance.asset_issuer);
              return true;
            }
          }
          
          // 2. Asset code match (fallback)
          if (expectedAssetCode && balance.asset_code) {
            const codeMatch = balance.asset_code === expectedAssetCode || 
                             balance.asset_code.includes(expectedAssetCode) ||
                             expectedAssetCode.includes(balance.asset_code);
            console.log('🔍 Asset code match check:', { 
              expectedAssetCode,
              balanceAssetCode: balance.asset_code,
              codeMatch
            });
            return codeMatch;
          }
          
          // 3. Geniş matching (son çare)
          const broadMatch = balance.asset_code && (
            assetToTransfer.includes(balance.asset_code) || 
            balance.asset_code.includes('USDC') ||
            balance.asset_code.includes('USD') ||
            balance.asset_code.includes('STAR') ||
            balance.asset_code.includes('BTC') ||
            balance.asset_code.includes('ETH') ||
            balance.asset_code.includes('XTAR')
          );
          console.log('🔍 Broad asset match check:', { 
            balanceAssetCode: balance.asset_code,
            balanceAssetIssuer: balance.asset_issuer,
            assetToTransfer, 
            broadMatch 
          });
          return broadMatch;
        }
      });
      
      console.log('💰 Found asset balance:', assetBalance);
      
      if (!assetBalance) {
        console.log('❌ Asset balance bulunamadı! Mevcut balances:');
        account.balances.forEach((bal: any, index: number) => {
          console.log(`  ${index}: ${bal.asset_type === 'native' ? 'XLM (native)' : bal.asset_code} - ${bal.balance} - Issuer: ${bal.asset_issuer || 'N/A'}`);
        });
        console.log('Aranan asset:', assetToTransfer);
        return;
      }
      
      if (parseFloat(assetBalance.balance) < 0.1) {
        console.log('⚠️ Transfer için yeterli balance yok:', assetBalance);
        return;
      }
      /////murat
      // XLM için Stellar minimum account reserve (1 XLM) + işlem ücreti rezerv et
      const transferAmount = assetToTransfer.includes('native') 
        ? Math.max(0, parseFloat(assetBalance.balance) - 1.5) // 1.5 XLM rezerv: 1 XLM min account + 0.5 XLM fees
        : parseFloat(assetBalance.balance) * 0.99; // %99'unu gönder
      
      if (transferAmount <= 0.1) { // Minimum 0.1 transfer gerekli
        console.log('⚠️ Transfer miktarı çok düşük:', transferAmount, 'Balance:', assetBalance.balance);
        return;
      }
      
      console.log(`📤 Transfer edilecek: ${transferAmount} ${assetBalance.asset_code || 'XLM'}`);
      
      // Server ve transaction oluştur
      const server = new StellarSdk.Horizon.Server('https://horizon-testnet.stellar.org');
      const botKeypair = StellarSdk.Keypair.fromSecret(fromBotWallet.secretKey);
      const botAccount = await server.loadAccount(fromBotWallet.publicKey);
      
      // Asset oluştur
      let asset;
      if (assetToTransfer.includes('native')) {
        asset = StellarSdk.Asset.native();
        console.log('🪙 Native XLM asset oluşturuldu');
      } else {
        // Contract asset için issuer bilgisi gerekli
        if (assetBalance.asset_issuer && assetBalance.asset_code) {
          asset = new StellarSdk.Asset(assetBalance.asset_code, assetBalance.asset_issuer);
          console.log('🎯 Custom asset oluşturuldu:', assetBalance.asset_code, assetBalance.asset_issuer);
        } else {
          console.log('⚠️ Asset issuer/code bilgisi eksik, XLM transfer ediliyor');
          asset = StellarSdk.Asset.native();
          // XLM balance'ını al ve transfer et
          const xlmBalance = account.balances.find((b: any) => b.asset_type === 'native');
          if (xlmBalance && parseFloat(xlmBalance.balance) > 0.5) {
            const xlmTransferAmount = Math.max(0, parseFloat(xlmBalance.balance) - 0.5);
            console.log(`📤 Fallback XLM transfer: ${xlmTransferAmount}`);
          }
        }
      }
      
      // Payment transaction oluştur
      const transaction = new StellarSdk.TransactionBuilder(botAccount, {
        fee: StellarSdk.BASE_FEE,
        networkPassphrase: StellarSdk.Networks.TESTNET,
      })
      .addOperation(StellarSdk.Operation.payment({
        destination: toMainWallet,
        asset: asset,
        amount: transferAmount.toFixed(7), // Decimal format, stroop değil
      }))
      .setTimeout(180)
      .build();
      
      // Bot imza at
      transaction.sign(botKeypair);
      
      // Gönder
      const result = await server.submitTransaction(transaction);
      console.log('✅ Transfer successful:', result.hash);
      
      return result.hash;
      
    } catch (error: any) {
      console.error('❌ Transfer profit error:', error);
      
      // Stellar hata kodlarını kontrol et
      if (error.response?.data?.extras?.result_codes) {
        const resultCodes = error.response.data.extras.result_codes;
        console.error('Stellar hata kodları:', resultCodes);
        throw new Error(`Transfer hatası: ${JSON.stringify(resultCodes)}`);
      }
      
      throw new Error(`Token transfer hatası: ${error.message || 'Bilinmeyen hata'}`);
    }
  }, []);

  // 🤖 Bot Otomatik İşlem Execution (Tam Otomatik)
  const executeBotTrade = useCallback(async (type: 'buy' | 'sell', amount: string, targetPrice: string) => {
    setIsTrading(true);
    
    try {
      setAutoTradeStatus(`🤖 Bot ${type === 'buy' ? 'alım' : 'satım'} başlatılıyor...`);

      // Bot mode kontrolü ve validasyon
      const usingBotWallet = botMode === 'auto' && botWallet;
      const signerKey = usingBotWallet ? botWallet.publicKey : publicKey;
      
      if (!signerKey) {
        throw new Error('Cüzdan bağlı değil.');
      }

      // Bot wallet kullanılıyorsa balance kontrolü
      if (usingBotWallet) {
        if (botBalance < 1) { // Minimum 1 XLM gerekli
          throw new Error(`Bot cüzdanında yetersiz bakiye. Mevcut: ${botBalance.toFixed(2)} XLM, Minimum: 1 XLM gerekli.`);
        }
        setAutoTradeStatus(`🤖 Bot wallet kullanılıyor: ${botWallet.publicKey.slice(0, 10)}...`);
      } else {
        setAutoTradeStatus(`👤 Ana wallet kullanılıyor: ${publicKey?.slice(0, 10)}...`);
      }

      const numAmount = parseFloat(amount);
      if (isNaN(numAmount) || numAmount < 1) {
        throw new Error('Minimum 1 asset gereklidir.');
      }

      setAutoTradeStatus(`📊 Soroswap API'den quote alınıyor...`);

      // Dinamik trade parametrelerini al (Ana sayfa ile aynı)
      const assetInAddress = type === 'buy' ? autoTradeAssetIn : autoTradeAssetOut;
      const assetOutAddress = type === 'buy' ? autoTradeAssetOut : autoTradeAssetIn;
      const { maxHops, slippageBps } = getDynamicTradeParams(assetInAddress, assetOutAddress);

      // Soroswap API quote al (Ana sayfa ile aynı parametreler) - RETRY MEKANİZMASI
      let quoteResponse: any;
      let retryCount = 0;
      const maxRetries = 3;
      
      while (retryCount < maxRetries) {
        try {
          setAutoTradeStatus(`📊 Soroswap API'den quote alınıyor... (Deneme ${retryCount + 1}/${maxRetries})`);
          
          quoteResponse = await Promise.race([
            soroswapAPI.getQuote({
              assetIn: assetInAddress,
              assetOut: assetOutAddress,
              amount: toStroop(amount), // Ana sayfa ile aynı format
              tradeType: 'EXACT_IN' as const,
              protocols: DEFAULT_PROTOCOLS,
              slippageBps: slippageBps, // Dinamik slippage
              feeBps: 50,
              parts: 1,
              maxHops: maxHops // Dinamik maxHops
            }),
            new Promise((_, reject) => 
              setTimeout(() => reject(new Error(`Quote API timeout (${30 + (retryCount * 10)} saniye)`)), 30000 + (retryCount * 10000))
            )
          ]) as any;
          
          // Başarılı olursa döngüden çık
          break;
          
        } catch (quoteError) {
          retryCount++;
          console.error(`Quote deneme ${retryCount} hatası:`, quoteError);
          
          if (retryCount >= maxRetries) {
            throw new Error(`Quote API ${maxRetries} deneme sonrası başarısız: ${quoteError instanceof Error ? quoteError.message : 'Bilinmeyen hata'}`);
          }
          
          // Bir sonraki deneme için bekle
          setAutoTradeStatus(`⏳ Quote hatası, ${2 * retryCount} saniye sonra tekrar denenecek...`);
          await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));
        }
      }

      if (!quoteResponse.assetIn || !quoteResponse.assetOut) {
        throw new Error(`Quote alma hatası: Invalid quote response`);
      }

      setAutoTradeStatus(`🔗 Transaction oluşturuluyor...`);

      // Build transaction (Ana sayfa ile aynı mantık) - RETRY MEKANİZMASI
      console.log('🔨 Building transaction for user:', signerKey);
      let buildResponse: any;
      retryCount = 0;
      
      while (retryCount < maxRetries) {
        try {
          setAutoTradeStatus(`🔗 Transaction oluşturuluyor... (Deneme ${retryCount + 1}/${maxRetries})`);
          
          buildResponse = await Promise.race([
            soroswapAPI.buildTransaction({
              quote: quoteResponse,
              referralId: "GALAXYVOIDAOPZTDLHILAJQKCVVFMD4IKLXLSZV5YHO7VY74IWZILUTO",
              sponsor: "GDISPX62G6EGBZX3I2VMB4J3O3CPFHHRAJ4QZNOYVXYVHJ6BVRL2A3Y3",
              from: signerKey // Kullanıcının veya bot'un wallet adresi
            }),
            new Promise((_, reject) => 
              setTimeout(() => reject(new Error(`Build transaction timeout (${30 + (retryCount * 10)} saniye)`)), 30000 + (retryCount * 10000))
            )
          ]) as any;
          
          // Başarılı olursa döngüden çık
          break;
          
        } catch (buildError) {
          retryCount++;
          console.error(`Build transaction deneme ${retryCount} hatası:`, buildError);
          
          if (retryCount >= maxRetries) {
            throw new Error(`Build transaction ${maxRetries} deneme sonrası başarısız: ${buildError instanceof Error ? buildError.message : 'Bilinmeyen hata'}`);
          }
          
          // Bir sonraki deneme için bekle
          setAutoTradeStatus(`⏳ Transaction build hatası, ${2 * retryCount} saniye sonra tekrar denenecek...`);
          await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));
        }
      }

      if (!buildResponse.xdr) {
        throw new Error(`Build transaction hatası: No XDR received`);
      }
      console.log('✅ Transaction built successfully:', buildResponse);

      setAutoTradeStatus(`🔐 ${usingBotWallet ? 'Bot otomatik imza atıyor' : 'Kullanıcı imzası bekleniyor'}...`);

      let signedXDR: string;

      if (usingBotWallet) {
        // 🤖 Bot otomatik imza
        const StellarSdk = await import('@stellar/stellar-sdk');
        const botKeypair = StellarSdk.Keypair.fromSecret(botWallet.secretKey);
        const transaction = new StellarSdk.Transaction(buildResponse.xdr, StellarSdk.Networks.TESTNET);
        transaction.sign(botKeypair);
        signedXDR = transaction.toEnvelope().toXDR('base64');
        
        setAutoTradeStatus(`✅ Bot imzası tamamlandı, transaction gönderiliyor...`);
      } else {
        // 👤 Kullanıcı manuel imza (Ana sayfa ile aynı mantık)
        console.log('🔐 Signing transaction XDR:', buildResponse.xdr);
        const signedXdr = await signTransaction(buildResponse.xdr);
        
        console.log('✅ Signed XDR received:', typeof signedXdr, signedXdr);
        
        // SignedXDR'ın string olduğundan emin ol (Ana sayfa ile aynı)
        if (typeof signedXdr === 'string') {
          signedXDR = signedXdr;
        } else if (signedXdr && typeof signedXdr === 'object' && 'signedTxXdr' in signedXdr) {
          signedXDR = (signedXdr as { signedTxXdr: string }).signedTxXdr;
          console.log('🔧 Extracted signedTxXdr from object:', signedXDR);
        } else {
          throw new Error(`Invalid signed XDR format: ${JSON.stringify(signedXdr)}`);
        }
        
        if (!signedXDR || signedXDR.trim() === '') {
          throw new Error('Signed XDR is empty or invalid');
        }
        
        console.log('📤 Ready to send transaction with XDR:', signedXDR.substring(0, 100) + '...');
      }
      
      setAutoTradeStatus(`📤 Transaction gönderiliyor...`);

      // Submit transaction - RETRY MEKANİZMASI
      let submitResponse: any;
      retryCount = 0;
      
      while (retryCount < maxRetries) {
        try {
          setAutoTradeStatus(`📤 Transaction gönderiliyor... (Deneme ${retryCount + 1}/${maxRetries})`);
          
          submitResponse = await Promise.race([
            soroswapAPI.sendTransaction({ xdr: signedXDR }),
            new Promise((_, reject) => 
              setTimeout(() => reject(new Error(`Send transaction timeout (${45 + (retryCount * 15)} saniye)`)), 45000 + (retryCount * 15000))
            )
          ]) as any;
          
          // Başarılı olursa döngüden çık
          break;
          
        } catch (submitError) {
          retryCount++;
          console.error(`Submit transaction deneme ${retryCount} hatası:`, submitError);
          
          if (retryCount >= maxRetries) {
            throw new Error(`Submit transaction ${maxRetries} deneme sonrası başarısız: ${submitError instanceof Error ? submitError.message : 'Bilinmeyen hata'}`);
          }
          
          // Bir sonraki deneme için bekle
          setAutoTradeStatus(`⏳ Transaction submit hatası, ${3 * retryCount} saniye sonra tekrar denenecek...`);
          await new Promise(resolve => setTimeout(resolve, 3000 * retryCount));
        }
      }
      
      if (!submitResponse.hash && !submitResponse.status) {
        throw new Error(`Transaction submission hatası: No hash received`);
      }

      const assetInSymbol = ASSET_OPTIONS.find(a => a.value === (type === 'buy' ? autoTradeAssetIn : autoTradeAssetOut))?.symbol || 'Unknown';
      const assetOutSymbol = ASSET_OPTIONS.find(a => a.value === (type === 'buy' ? autoTradeAssetOut : autoTradeAssetIn))?.symbol || 'Unknown';

      setAutoTradeStatus(`✅ Bot ${type === 'buy' ? 'alım' : 'satım'} başarılı!
🤖 Otomatik İşlem Tamamlandı
💰 Miktar: ${amount} ${assetInSymbol}
📊 Pair: ${assetInSymbol}/${assetOutSymbol}
💵 Fiyat: $${displayPrice.toFixed(4)}
🆔 Hash: ${submitResponse.hash || 'N/A'}`);

      // 🎯 Bot işlem sonrası aldığı token'ları kullanıcının cüzdanına transfer et
      if (usingBotWallet && customWalletAddress && botWallet) {
        try {
          setAutoTradeStatus(prev => `${prev}\n\n💸 Aldığınız token'lar ${customWalletAddress.slice(0, 10)}... adresine transfer ediliyor...`);
          
          // İşlem sonrası bot balance'ını tekrar kontrol et
          await new Promise(resolve => setTimeout(resolve, 3000)); // 3 saniye bekle
          
          const postTradeResponse = await fetch(`https://horizon-testnet.stellar.org/accounts/${botWallet.publicKey}`);
          if (postTradeResponse.ok) {
            const postTradeAccount = await postTradeResponse.json();
            console.log('📊 İşlem sonrası bot balances:', postTradeAccount.balances);
            
            // Aldığımız asset'i bul (işlem sonucunda aldığımız token)
            const targetAssetValue = type === 'buy' ? autoTradeAssetOut : autoTradeAssetIn; // Buy'da USDC/XSTAR, Sell'de XLM
            const targetAssetInfo = ASSET_OPTIONS.find(a => a.value === targetAssetValue);
            console.log('🎯 Hedef transfer asset:', { targetAssetValue, targetAssetInfo });
            
            // Bu asset'in bot wallet'ındaki balance'ını bul
            const targetAssetBalance = postTradeAccount.balances.find((balance: any) => {
              if (targetAssetValue.includes('native') || targetAssetValue.includes('XLM') || targetAssetInfo?.symbol === 'XLM') {
                console.log('🪙 XLM asset aranıyor, balance:', balance.asset_type, balance.balance);
                return balance.asset_type === 'native';
              } else {
                // Contract asset için - asset symbol ile eşleştir
                const targetSymbol = targetAssetInfo?.symbol;
                console.log('🔍 Asset balance check:', {
                  targetSymbol,
                  balanceAssetCode: balance.asset_code,
                  balanceAssetType: balance.asset_type,
                  balanceAmount: balance.balance
                });
                
                return balance.asset_code && targetSymbol && (
                  balance.asset_code === targetSymbol ||
                  balance.asset_code.includes(targetSymbol) ||
                  targetSymbol.includes(balance.asset_code) ||
                  // Common asset matches
                  (targetSymbol === 'USDC' && balance.asset_code.includes('USD')) ||
                  (targetSymbol === 'XTAR' && balance.asset_code.includes('STAR')) ||
                  (targetSymbol === 'BTC' && balance.asset_code.includes('BTC')) ||
                  (targetSymbol === 'ETH' && balance.asset_code.includes('ETH'))
                );
              }
            });
            
            console.log('💰 Bulunan hedef asset balance:', targetAssetBalance);
            
            if (targetAssetBalance && parseFloat(targetAssetBalance.balance) > (targetAssetBalance.asset_type === 'native' ? 2.0 : 0.1)) {
              // Hedef asset'i transfer et
              const assetIdentifier = targetAssetBalance.asset_type === 'native' 
                ? 'native' 
                : `${targetAssetBalance.asset_code}_${targetAssetBalance.asset_issuer || ''}`;
              
              console.log('📤 Transfer edilecek asset ID:', assetIdentifier);
              
              const transferHash = await transferProfitToMainWallet(
                assetIdentifier,
                botWallet,
                customWalletAddress
              );
              
              setAutoTradeStatus(prev => `${prev}\n✅ ${targetAssetBalance.asset_code || 'XLM'} cüzdanınıza transfer edildi!
💸 Transfer Hash: ${transferHash || 'N/A'}`);
            } else {
              // Hedef asset bulunamazsa en yüksek balance'lı asset'i transfer et
              console.log('⚠️ Hedef asset bulunamadı, en yüksek balance transfer ediliyor');
              
              const transferableAssets = postTradeAccount.balances.filter((balance: any) => 
                parseFloat(balance.balance) > (balance.asset_type === 'native' ? 2.0 : 0.1) // XLM için 2.0, diğerleri için 0.1
              );
              
              if (transferableAssets.length > 0) {
                const highestBalance = transferableAssets.reduce((prev: any, current: any) => 
                  parseFloat(current.balance) > parseFloat(prev.balance) ? current : prev
                );
                
                const assetIdentifier = highestBalance.asset_type === 'native' 
                  ? 'native' 
                  : `${highestBalance.asset_code}_${highestBalance.asset_issuer}`;
                
                const transferHash = await transferProfitToMainWallet(
                  assetIdentifier,
                  botWallet,
                  customWalletAddress
                );
                
                setAutoTradeStatus(prev => `${prev}\n✅ ${highestBalance.asset_code || 'XLM'} cüzdanınıza transfer edildi!
💸 Transfer Hash: ${transferHash || 'N/A'}`);
              } else {
                setAutoTradeStatus(prev => `${prev}\n⚠️ Transfer edilebilir asset bulunamadı`);
              }
            }
          }
          
        } catch (transferError) {
          const transferErrorMsg = transferError instanceof Error ? transferError.message : 'Transfer hatası';
          setAutoTradeStatus(prev => `${prev}\n⚠️ Transfer hatası: ${transferErrorMsg}`);
          console.error('Token transfer hatası:', transferError);
        }
      }

      // Telegram bildirimi
      if (telegramBot && telegramChatId) {
        const message = `🤖 BOT OTOMATİK TRADE!
✅ ${type === 'buy' ? `💰 ${assetOutSymbol} ALIM` : `💸 ${assetInSymbol} SATIM`} BAŞARILI
🤖 Pre-authorized İşlem Tamamlandı
📊 Tetiklenen: $${targetPrice}
💵 Gerçekleşen: $${displayPrice.toFixed(4)}
💰 Harcanan: ${amount} ${assetInSymbol}
${usingBotWallet ? `💸 Aldığınız ${type === 'buy' ? assetOutSymbol : assetInSymbol} token'ları cüzdanınıza transfer edildi!
🏦 Transfer Adresi: ${customWalletAddress.slice(0, 10)}...${customWalletAddress.slice(-10)}` : ''}
🆔 Trade Hash: ${submitResponse.hash || 'N/A'}
⏰ ${new Date().toLocaleString('tr-TR')}`;
        
        await telegramBot.sendMessage(telegramChatId, message);
      }

      // Reset değerler
      if (type === 'buy') {
        setBuyTargetPrice('');
        setAutoBuyAmount('');
        setPreAuthBuyOrder(null);
        localStorage.removeItem(`preauth_buy_${publicKey}`);
      } else {
        setSellTargetPrice('');
        setAutoSellAmount('');
        setPreAuthSellOrder(null);
        localStorage.removeItem(`preauth_sell_${publicKey}`);
      }
      
      setHasAutoTradeError(false);
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen hata';
      setAutoTradeStatus(`❌ Bot ${type === 'buy' ? 'alım' : 'satım'} hatası: ${errorMessage}
      
🤖 BOT İŞLEM DURDURULDU
Manuel olarak tekrar aktifleştirin.`);
      
      setHasAutoTradeError(true);
      setIsAutoTradingEnabled(false);
      
      // Reset değerler hata durumunda da
      if (type === 'buy') {
        setBuyTargetPrice('');
        setAutoBuyAmount('');
        setPreAuthBuyOrder(null);
        localStorage.removeItem(`preauth_buy_${publicKey}`);
      } else {
        setSellTargetPrice('');
        setAutoSellAmount('');
        setPreAuthSellOrder(null);
        localStorage.removeItem(`preauth_sell_${publicKey}`);
      }
      
      // Telegram hata bildirimi
      if (telegramBot && telegramChatId) {
        const message = `🚨 BOT İŞLEM HATASI!
❌ ${type === 'buy' ? 'ALIM' : 'SATIM'} BAŞARISIZ
🤖 Bot İşlem Durduruldu
📊 Hedef: $${targetPrice}
💵 Güncel: $${displayPrice.toFixed(4)}
⚠️ Hata: ${errorMessage}
⏰ ${new Date().toLocaleString('tr-TR')}`;
        
        await telegramBot.sendMessage(telegramChatId, message);
      }
    } finally {
      setIsTrading(false);
    }
  }, [publicKey, signTransaction, displayPrice, telegramBot, telegramChatId, autoTradeAssetIn, autoTradeAssetOut, botMode, botWallet, botBalance, transferProfitToMainWallet, customWalletAddress, getDynamicTradeParams]);

  // 🤖 Grid Bot Özel İşlem Execution (Alımda Transfer YOK, Satımda Transfer VAR)
  const executeGridBotTrade = useCallback(async (type: 'buy' | 'sell', amount: string, targetPrice: string, transferAfterTrade = false) => {
    setIsTrading(true);
    
    try {
      setAutoTradeStatus(`🤖 Grid Bot ${type === 'buy' ? 'alım' : 'satım'} başlatılıyor...`);

      // Bot mode kontrolü ve validasyon
      const usingBotWallet = botMode === 'auto' && botWallet;
      const signerKey = usingBotWallet ? botWallet.publicKey : publicKey;
      
      if (!signerKey) {
        throw new Error('Cüzdan bağlı değil.');
      }

      // Bot wallet kullanılıyorsa balance kontrolü
      if (usingBotWallet) {
        if (botBalance < 1) { // Minimum 1 XLM gerekli
          throw new Error(`Bot cüzdanında yetersiz bakiye. Mevcut: ${botBalance.toFixed(2)} XLM, Minimum: 1 XLM gerekli.`);
        }
        setAutoTradeStatus(`🤖 Grid Bot wallet kullanılıyor: ${botWallet.publicKey.slice(0, 10)}...`);
      } else {
        setAutoTradeStatus(`👤 Grid Bot ana wallet kullanılıyor: ${publicKey?.slice(0, 10)}...`);
      }

      const numAmount = parseFloat(amount);
      if (isNaN(numAmount) || numAmount < 1) {
        throw new Error('Minimum 1 asset gereklidir.');
      }

      setAutoTradeStatus(`📊 Grid Bot için Soroswap API'den quote alınıyor...`);

      // Dinamik trade parametrelerini al
      const assetInAddress = type === 'buy' ? autoTradeAssetIn : autoTradeAssetOut;
      const assetOutAddress = type === 'buy' ? autoTradeAssetOut : autoTradeAssetIn;
      const { maxHops, slippageBps } = getDynamicTradeParams(assetInAddress, assetOutAddress);

      // Soroswap API quote al - RETRY MEKANİZMASI
      let quoteResponse: any;
      let retryCount = 0;
      const maxRetries = 3;
      
      while (retryCount < maxRetries) {
        try {
          setAutoTradeStatus(`📊 Grid Bot quote alınıyor... (Deneme ${retryCount + 1}/${maxRetries})`);
          
          quoteResponse = await Promise.race([
            soroswapAPI.getQuote({
              assetIn: assetInAddress,
              assetOut: assetOutAddress,
              amount: toStroop(amount),
              tradeType: 'EXACT_IN' as const,
              protocols: DEFAULT_PROTOCOLS,
              slippageBps: slippageBps,
              feeBps: 50,
              parts: 1,
              maxHops: maxHops
            }),
            new Promise((_, reject) => 
              setTimeout(() => reject(new Error(`Grid Bot quote timeout (${30 + (retryCount * 10)} saniye)`)), 30000 + (retryCount * 10000))
            )
          ]) as any;
          
          break;
          
        } catch (quoteError) {
          retryCount++;
          console.error(`Grid Bot quote deneme ${retryCount} hatası:`, quoteError);
          
          if (retryCount >= maxRetries) {
            throw new Error(`Grid Bot quote API ${maxRetries} deneme sonrası başarısız: ${quoteError instanceof Error ? quoteError.message : 'Bilinmeyen hata'}`);
          }
          
          setAutoTradeStatus(`⏳ Grid Bot quote hatası, ${2 * retryCount} saniye sonra tekrar denenecek...`);
          await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));
        }
      }

      if (!quoteResponse.assetIn || !quoteResponse.assetOut) {
        throw new Error(`Grid Bot quote alma hatası: Invalid quote response`);
      }

      setAutoTradeStatus(`🔗 Grid Bot transaction oluşturuluyor...`);

      // Build transaction - RETRY MEKANİZMASI
      let buildResponse: any;
      retryCount = 0;
      
      while (retryCount < maxRetries) {
        try {
          setAutoTradeStatus(`🔗 Grid Bot transaction oluşturuluyor... (Deneme ${retryCount + 1}/${maxRetries})`);
          
          buildResponse = await Promise.race([
            soroswapAPI.buildTransaction({
              quote: quoteResponse,
              referralId: "GALAXYVOIDAOPZTDLHILAJQKCVVFMD4IKLXLSZV5YHO7VY74IWZILUTO",
              sponsor: "GDISPX62G6EGBZX3I2VMB4J3O3CPFHHRAJ4QZNOYVXYVHJ6BVRL2A3Y3",
              from: signerKey
            }),
            new Promise((_, reject) => 
              setTimeout(() => reject(new Error(`Grid Bot build timeout (${30 + (retryCount * 10)} saniye)`)), 30000 + (retryCount * 10000))
            )
          ]) as any;
          
          break;
          
        } catch (buildError) {
          retryCount++;
          console.error(`Grid Bot build deneme ${retryCount} hatası:`, buildError);
          
          if (retryCount >= maxRetries) {
            throw new Error(`Grid Bot build transaction ${maxRetries} deneme sonrası başarısız: ${buildError instanceof Error ? buildError.message : 'Bilinmeyen hata'}`);
          }
          
          setAutoTradeStatus(`⏳ Grid Bot transaction build hatası, ${2 * retryCount} saniye sonra tekrar denenecek...`);
          await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));
        }
      }

      if (!buildResponse.xdr) {
        throw new Error(`Grid Bot build transaction hatası: No XDR received`);
      }

      setAutoTradeStatus(`🔐 Grid Bot ${usingBotWallet ? 'otomatik imza atıyor' : 'kullanıcı imzası bekleniyor'}...`);

      let signedXDR: string;

      if (usingBotWallet) {
        // Bot otomatik imza
        const StellarSdk = await import('@stellar/stellar-sdk');
        const botKeypair = StellarSdk.Keypair.fromSecret(botWallet.secretKey);
        const transaction = new StellarSdk.Transaction(buildResponse.xdr, StellarSdk.Networks.TESTNET);
        transaction.sign(botKeypair);
        signedXDR = transaction.toEnvelope().toXDR('base64');
        
        setAutoTradeStatus(`✅ Grid Bot imzası tamamlandı, transaction gönderiliyor...`);
      } else {
        // Kullanıcı manuel imza
        const signedXdr = await signTransaction(buildResponse.xdr);
        
        if (typeof signedXdr === 'string') {
          signedXDR = signedXdr;
        } else if (signedXdr && typeof signedXdr === 'object' && 'signedTxXdr' in signedXdr) {
          signedXDR = (signedXdr as any).signedTxXdr;
        } else {
          throw new Error('Invalid signed XDR format received from Freighter');
        }
        
        if (!signedXDR || signedXDR.trim() === '') {
          throw new Error('Empty signed XDR received from Freighter');
        }
      }
      
      setAutoTradeStatus(`📤 Grid Bot transaction gönderiliyor...`);

      // Submit transaction - RETRY MEKANİZMASI
      let submitResponse: any;
      retryCount = 0;
      
      while (retryCount < maxRetries) {
        try {
          setAutoTradeStatus(`📤 Grid Bot transaction gönderiliyor... (Deneme ${retryCount + 1}/${maxRetries})`);
          
          submitResponse = await Promise.race([
            soroswapAPI.sendTransaction({ xdr: signedXDR }),
            new Promise((_, reject) => 
              setTimeout(() => reject(new Error(`Grid Bot send timeout (${45 + (retryCount * 15)} saniye)`)), 45000 + (retryCount * 15000))
            )
          ]) as any;
          
          break;
          
        } catch (submitError) {
          retryCount++;
          console.error(`Grid Bot submit deneme ${retryCount} hatası:`, submitError);
          
          if (retryCount >= maxRetries) {
            throw new Error(`Grid Bot submit transaction ${maxRetries} deneme sonrası başarısız: ${submitError instanceof Error ? submitError.message : 'Bilinmeyen hata'}`);
          }
          
          setAutoTradeStatus(`⏳ Grid Bot transaction submit hatası, ${3 * retryCount} saniye sonra tekrar denenecek...`);
          await new Promise(resolve => setTimeout(resolve, 3000 * retryCount));
        }
      }
      
      if (!submitResponse.hash && !submitResponse.status) {
        throw new Error(`Grid Bot transaction submission hatası: No hash received`);
      }

      const assetInSymbol = ASSET_OPTIONS.find(a => a.value === (type === 'buy' ? autoTradeAssetIn : autoTradeAssetOut))?.symbol || 'Unknown';
      const assetOutSymbol = ASSET_OPTIONS.find(a => a.value === (type === 'buy' ? autoTradeAssetOut : autoTradeAssetIn))?.symbol || 'Unknown';

      let statusMessage = `✅ Grid Bot ${type === 'buy' ? 'alım' : 'satım'} başarılı!
🤖 Grid Bot İşlem Tamamlandı
💰 Miktar: ${amount} ${assetInSymbol}
📊 Pair: ${assetInSymbol}/${assetOutSymbol}
💵 Fiyat: $${displayPrice.toFixed(4)}
🆔 Hash: ${submitResponse.hash || 'N/A'}`;

      // 🎯 Transfer mantığı: Sadece transferAfterTrade true ise (satım) transfer yap
      if (transferAfterTrade && usingBotWallet && customWalletAddress && botWallet) {
        try {
          setAutoTradeStatus(statusMessage + `\n🔄 Kazanç ana cüzdana transfer ediliyor...`);
          
          // 3 saniye bekle transaction'ın confirm olması için
          await new Promise(resolve => setTimeout(resolve, 3000));
          
          // Bot account'unu yeniden sorgula
          const response = await fetch(`https://horizon-testnet.stellar.org/accounts/${botWallet.publicKey}`);
          if (response.ok) {
            const postTradeAccount = await response.json();
            
            // Transfer edilecek asset'i belirle (satım sonrası alınan asset)
            const targetAssetValue = type === 'sell' ? autoTradeAssetOut : autoTradeAssetIn;
            const targetAssetInfo = ASSET_OPTIONS.find(a => a.value === targetAssetValue);
            
            // Hedef asset balance'ını bul
            const targetAssetBalance = postTradeAccount.balances.find((balance: any) => {
              if (targetAssetValue.includes('native')) {
                return balance.asset_type === 'native';
              } else {
                const targetSymbol = targetAssetInfo?.symbol;
                return balance.asset_code && targetSymbol && (
                  balance.asset_code === targetSymbol ||
                  balance.asset_code.includes(targetSymbol) ||
                  targetSymbol.includes(balance.asset_code)
                );
              }
            });
            
            if (targetAssetBalance && parseFloat(targetAssetBalance.balance) > 0.1) {
              const assetIdentifier = targetAssetBalance.asset_type === 'native' 
                ? 'native' 
                : `${targetAssetBalance.asset_code}_${targetAssetBalance.asset_issuer || ''}`;
              
              const transferHash = await transferProfitToMainWallet(
                assetIdentifier,
                botWallet,
                customWalletAddress
              );
              
              statusMessage += `\n✅ Kazanç cüzdanınıza transfer edildi!
💸 Transfer Hash: ${transferHash || 'N/A'}`;
            } else {
              statusMessage += `\n⚠️ Transfer edilebilir ${targetAssetInfo?.symbol} bulunamadı`;
            }
          }
        } catch (transferError) {
          console.error('Grid Bot transfer hatası:', transferError);
          statusMessage += `\n⚠️ Transfer hatası: ${transferError}`;
        }
      } else if (type === 'buy') {
        statusMessage += `\n🏦 Alınan tokenlar bot cüzdanında tutuluyor (satım için hazır)`;
      }

      setAutoTradeStatus(statusMessage);

      // Telegram bildirimi
      if (telegramBot && telegramChatId) {
        const message = `🤖 Grid Bot ${type === 'buy' ? 'Alım' : 'Satım'} Başarılı! 

💰 Miktar: ${amount} ${assetInSymbol}
💵 Fiyat: $${displayPrice.toFixed(4)}
🆔 Hash: ${submitResponse.hash || 'N/A'}
${transferAfterTrade ? '💸 Kazanç cüzdanınıza transfer edildi!' : '🏦 Tokenlar bot cüzdanında tutuluyor'}
⏰ ${new Date().toLocaleString('tr-TR')}`;
        
        await telegramBot.sendMessage(telegramChatId, message);
      }
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen hata';
      console.error('Grid Bot işlem hatası:', error);
      
      setAutoTradeStatus(`❌ Grid Bot ${type === 'buy' ? 'alım' : 'satım'} hatası: ${errorMessage}
🤖 Grid Bot İşlem Durduruldu
📊 Hedef: $${targetPrice}
💵 Güncel: $${displayPrice.toFixed(4)}
⚠️ Hata: ${errorMessage}
⏰ ${new Date().toLocaleString('tr-TR')}`);
      
      // Telegram hata bildirimi
      if (telegramBot && telegramChatId) {
        const message = `❌ Grid Bot ${type === 'buy' ? 'Alım' : 'Satım'} Hatası!

🤖 Grid Bot İşlem Durduruldu
📊 Hedef: $${targetPrice}
💵 Güncel: $${displayPrice.toFixed(4)}
⚠️ Hata: ${errorMessage}
⏰ ${new Date().toLocaleString('tr-TR')}`;
        
        await telegramBot.sendMessage(telegramChatId, message);
      }
    } finally {
      setIsTrading(false);
    }
  }, [publicKey, signTransaction, displayPrice, telegramBot, telegramChatId, autoTradeAssetIn, autoTradeAssetOut, botMode, botWallet, botBalance, transferProfitToMainWallet, customWalletAddress, getDynamicTradeParams]);



  // 🎯 Fiyat Bazlı Otomatik İşlem Kontrolü - Pre-Auth Version
  useEffect(() => {
    const checkPreAuthTrade = async () => {
      if (isTrading || hasAutoTradeError || !isAutoTradingEnabled || !isConnected || displayPrice === 0) {
        return;
      }

      const now = new Date();
      if (lastAutoTradeCheck.current && (now.getTime() - lastAutoTradeCheck.current.getTime()) < 3000) {
        return;
      }
      lastAutoTradeCheck.current = now;

      try {
        // 🎯 Pre-Auth Alım kontrolü
        if (preAuthBuyOrder && now < preAuthBuyOrder.expiry && 
            displayPrice <= parseFloat(preAuthBuyOrder.targetPrice) && !isTrading) {
          
          setAutoTradeStatus(`🎯 Pre-auth alım tetiklendi! $${displayPrice.toFixed(4)} <= $${preAuthBuyOrder.targetPrice}`);
          
          await executeBotTrade('buy', preAuthBuyOrder.amount, preAuthBuyOrder.targetPrice);
        }
        // 🎯 Pre-Auth Satım kontrolü
        else if (preAuthSellOrder && now < preAuthSellOrder.expiry && 
                 displayPrice >= parseFloat(preAuthSellOrder.targetPrice) && !isTrading) {
          
          setAutoTradeStatus(`🎯 Pre-auth satım tetiklendi! $${displayPrice.toFixed(4)} >= $${preAuthSellOrder.targetPrice}`);
          
          await executeBotTrade('sell', preAuthSellOrder.amount, preAuthSellOrder.targetPrice);
        }
        
        // 🤖 Grid Trading Bot kontrolü
        if (gridTradingBot && now < gridTradingBot.expiry && gridTradingBot.isActive && !isTrading) {
          
          if (gridTradingBot.currentStep === 'waiting_buy' && 
              displayPrice <= parseFloat(gridTradingBot.buyPrice)) {
            
            setAutoTradeStatus(`🤖 Grid Bot: Alım tetiklendi! $${displayPrice.toFixed(4)} ≤ $${gridTradingBot.buyPrice} (eşit veya altında)`);
            
            // Alım işlemini gerçekleştir (Transfer YOK - bot cüzdanında kalacak)
            await executeGridBotTrade('buy', gridTradingBot.amount, gridTradingBot.buyPrice, false);
            
            // Grid bot'u satım aşamasına geçir
            const updatedGridBot = {
              ...gridTradingBot,
              currentStep: 'waiting_sell' as const,
              buyHash: 'completed',
              status: `✅ GRID BOT - ALIM TAMAMLANDI!
🔄 İŞLEM SIRASI GÜNCELLENDİ:
1️⃣ ALIM AŞAMASI: ✅ TAMAMLANDI!
   → Alım Fiyatı: $${displayPrice.toFixed(4)} (≤ $${gridTradingBot.buyPrice})
   → Alınan Miktar: ${gridTradingBot.amount} ${getAssetSymbol(autoTradeAssetIn)}
2️⃣ SATIM AŞAMASI: � BAŞLADI!
   → Hedef: Fiyat ≥ $${gridTradingBot.sellPrice} (eşit veya üstünde)
   → Satılacak: Bot'daki ${getAssetSymbol(autoTradeAssetOut)} tokenlar
3️⃣ KAR TRANSFERİ: ⏳ Satım sonrası otomatik transfer

📊 ŞU ANDA: 2️⃣ Satım fiyatı bekleniyor ($${gridTradingBot.sellPrice} ve üstü)
🔄 Otomatik döngü devam ediyor...`
            };
            
            setGridTradingBot(updatedGridBot);
            localStorage.setItem(`grid_bot_${publicKey}`, JSON.stringify(updatedGridBot));
            
          } else if (gridTradingBot.currentStep === 'waiting_sell' && 
                     displayPrice >= parseFloat(gridTradingBot.sellPrice)) {
            
            setAutoTradeStatus(`🤖 Grid Bot: Satım tetiklendi! $${displayPrice.toFixed(4)} ≥ $${gridTradingBot.sellPrice} (eşit veya üstünde)`);
            
            // Satım işlemini gerçekleştir (Transfer VAR - kazanç ana cüzdana gidecek)
            try {
              if (botWallet) {
                const response = await fetch(`https://horizon-testnet.stellar.org/accounts/${botWallet.publicKey}`);
                if (response.ok) {
                  const account = await response.json();
                  
                  // Debug: Bot cüzdanındaki tüm asset'leri logla
                  console.log('🤖 Grid Bot cüzdanındaki asset\'ler:', account.balances);
                  account.balances.forEach((balance: any, index: number) => {
                    console.log(`Asset ${index}:`, {
                      type: balance.asset_type,
                      code: balance.asset_code,
                      issuer: balance.asset_issuer,
                      contract: balance.asset_contract,
                      asset: balance.asset,
                      balance: balance.balance
                    });
                  });
                  
                  // Satılacak asset'i bul (alım sonrası bot'da kalan token)
                  const targetAssetValue = autoTradeAssetOut;
                  const targetAssetInfo = ASSET_OPTIONS.find(a => a.value === targetAssetValue);
                  
                  console.log('🎯 Aranan asset:', {
                    value: targetAssetValue,
                    symbol: targetAssetInfo?.symbol,
                    label: targetAssetInfo?.label,
                    rawAssetOptions: ASSET_OPTIONS
                  });
                  
                  console.log('🔍 Asset matching başlıyor...');
                  
                  const targetBalance = account.balances.find((balance: any, index: number) => {
                    console.log(`🔍 Checking asset ${index}:`, {
                      balanceType: balance.asset_type,
                      balanceCode: balance.asset_code,
                      balanceIssuer: balance.asset_issuer?.slice(0, 10) + '...',
                      balanceContract: balance.asset_contract?.slice(0, 10) + '...',
                      targetValue: targetAssetValue.slice(0, 20) + '...',
                      targetSymbol: targetAssetInfo?.symbol
                    });
                    
                    if (targetAssetValue.includes('native')) {
                      const isMatch = balance.asset_type === 'native';
                      console.log(`   → Native match: ${isMatch}`);
                      return isMatch;
                    } else {
                      const targetSymbol = targetAssetInfo?.symbol;
                      
                      // Soroswap contract asset için gelişmiş matching
                      if (balance.asset_type === 'credit_alphanum4' || balance.asset_type === 'credit_alphanum12') {
                        // Geleneksel Stellar asset matching
                        const codeMatch = balance.asset_code && targetSymbol && (
                          balance.asset_code === targetSymbol ||
                          balance.asset_code.includes(targetSymbol) ||
                          targetSymbol.includes(balance.asset_code)
                        );
                        console.log(`   → Credit asset code match: ${codeMatch} (${balance.asset_code} vs ${targetSymbol})`);
                        return codeMatch;
                      } else if (balance.asset_type === 'contract') {
                        // Soroswap contract asset matching
                        const contractMatch = balance.asset_contract === targetAssetValue ||
                               balance.asset === targetAssetValue;
                        const codeMatch = balance.asset_code && targetSymbol && (
                                 balance.asset_code === targetSymbol ||
                                 balance.asset_code.includes(targetSymbol) ||
                                 targetSymbol.includes(balance.asset_code)
                               );
                        const anyMatch = contractMatch || codeMatch;
                        console.log(`   → Contract asset match: contractMatch=${contractMatch}, codeMatch=${codeMatch}, anyMatch=${anyMatch}`);
                        return anyMatch;
                      } else {
                        // Fallback - herhangi bir matching
                        const codeMatch = balance.asset_code && targetSymbol && (
                          balance.asset_code === targetSymbol ||
                          balance.asset_code.includes(targetSymbol) ||
                          targetSymbol.includes(balance.asset_code)
                        );
                        const contractMatch = balance.asset_contract === targetAssetValue ||
                                            balance.asset === targetAssetValue;
                        const anyMatch = codeMatch || contractMatch;
                        console.log(`   → Fallback match: codeMatch=${codeMatch}, contractMatch=${contractMatch}, anyMatch=${anyMatch}`);
                        return anyMatch;
                      }
                    }
                  });
                  
                  console.log('🔍 Asset matching sonucu:', targetBalance);
                  
                  if (targetBalance && parseFloat(targetBalance.balance) > 0.1) {
                    // Bot'daki token miktarının %95'ini sat (fee için %5 rezerv)
                    const sellAmount = (parseFloat(targetBalance.balance) * 0.95).toFixed(4);
                    
                    // 🔄 USDC BULMA ALGORİTMASI - Geliştirilmiş
                    console.log('\n🎯 USDC BULMA ALGORİTMASI BAŞLADI');
                    console.log('Hedef Asset:', targetAssetInfo);
                    console.log('Bot Cüzdan ID:', botWallet?.publicKey);
                    console.log('Bot Balances:', account.balances);
                    
                    // Birden fazla algoritma ile USDC ara
                    let usdcBalance = null;
                    
                    // Algoritma 1: Asset code ile arama
                    if (!usdcBalance) {
                      usdcBalance = account.balances.find((balance: any) => 
                        balance.asset_code === 'USDC'
                      );
                      if (usdcBalance) console.log('✅ Algoritma 1: Asset code ile USDC bulundu:', usdcBalance);
                    }
                    
                    // Algoritma 2: Contract address ile arama
                    if (!usdcBalance) {
                      const usdcContractAddress = 'CBBHRKEP5M3NUDRISGLJKGHDHX3DA2CN2AZBQY6WLVUJ7VNLGSKBDUCM';
                      usdcBalance = account.balances.find((balance: any) => 
                        balance.asset_code === usdcContractAddress ||
                        balance.asset_issuer === usdcContractAddress ||
                        (balance.asset_type === 'contract' && balance.contract === usdcContractAddress)
                      );
                      if (usdcBalance) console.log('✅ Algoritma 2: Contract address ile USDC bulundu:', usdcBalance);
                    }
                    
                    // Algoritma 3: Target asset ile eşleştirme  
                    if (!usdcBalance && targetAssetInfo) {
                      usdcBalance = account.balances.find((balance: any) => {
                        if (targetAssetInfo.type === 'native') {
                          return balance.asset_type === 'native';
                        } else if (targetAssetInfo.type === 'contract') {
                          return balance.asset_type === 'contract' && 
                                 balance.contract === targetAssetInfo.contract;
                        } else if (targetAssetInfo.type === 'credit_alphanum4' || targetAssetInfo.type === 'credit_alphanum12') {
                          return balance.asset_code === targetAssetInfo.code && 
                                 balance.asset_issuer === targetAssetInfo.issuer;
                        }
                        return false;
                      });
                      if (usdcBalance) console.log('✅ Algoritma 3: Target asset eşleştirme ile bulundu:', usdcBalance);
                    }
                    
                    if (usdcBalance && parseFloat(usdcBalance.balance) > 0.1) {
                      const sellAmount = (parseFloat(usdcBalance.balance) * 0.95).toFixed(4);
                      console.log(`💸 Grid Bot: ${sellAmount} USDC satılacak`);
                      
                      setAutoTradeStatus(`🔄 Grid Bot: USDC satışı yapılıyor...`);
                      
                      // Grid Bot özel satım fonksiyonuyla sat (transfer = true)
                      await executeGridBotTrade('sell', sellAmount, gridTradingBot.sellPrice, true);
                      
                      // Grid bot'u tamamlandı olarak işaretle (USDC satım)
                      const completedGridBot = {
                        ...gridTradingBot,
                        currentStep: 'completed' as const,
                        sellHash: 'completed',
                        isActive: false,
                        status: `✅ GRID BOT TAMAMLANDI! (USDC Satış)
🔄 İŞLEM SIRASI TAMAMLANDI - NORMAL:
1️⃣ ALIM: ✅ $${gridTradingBot.buyPrice} (≤ eşit veya altında tetiklendi)
2️⃣ SATIM: ✅ $${displayPrice.toFixed(4)} (≥ eşit veya üstünde tetiklendi)  
3️⃣ KAR TRANSFERİ: ✅ Ana cüzdana transfer edildi!

💰 İşlem Miktarı: ${gridTradingBot.amount} ${getAssetSymbol(autoTradeAssetIn)}
💸 Satılan USDC: ${sellAmount} USDC
✅ Not: USDC başarıyla bulundu ve satıldı
📈 Gerçekleşen Kar: ${((displayPrice - parseFloat(gridTradingBot.buyPrice)) / parseFloat(gridTradingBot.buyPrice) * 100).toFixed(2)}%
🎉 Grid trading döngüsü başarıyla tamamlandı!`
                      };
                      
                      setGridTradingBot(completedGridBot);
                      localStorage.setItem(`grid_bot_${publicKey}`, JSON.stringify(completedGridBot));
                      
                      // 5 dakika sonra Grid Bot'u temizle
                      setTimeout(() => {
                        setGridTradingBot(null);
                        localStorage.removeItem(`grid_bot_${publicKey}`);
                      }, 5 * 60 * 1000);
                      
                    } else {
                      console.log('❌ USDC bulunamadı, XLM ile deneyim...');
                      
                      // XLM ile alternatif satış (Debug modu)
                      const xlmBalance = account.balances.find((balance: any) => 
                        balance.asset_type === 'native' && parseFloat(balance.balance) > 2.5 // Min 2.5 XLM rezerv
                      );
                      
                      if (xlmBalance) {
                        const sellAmount = (parseFloat(xlmBalance.balance) * 0.7).toFixed(4); // %70'ini sat
                        
                        console.log(`💸 Grid Bot Alternatif: ${sellAmount} XLM satılacak (Debug mode)`);
                        
                        setAutoTradeStatus(`🔄 Grid Bot: USDC bulunamadı, XLM satışı yapılıyor (Debug)...`);
                        
                        try {
                          // Grid Bot özel satım fonksiyonuyla XLM sat (transfer = true)
                          await executeGridBotTrade('sell', sellAmount, gridTradingBot.sellPrice, true);
                          
                          // Grid bot'u tamamlandı olarak işaretle (XLM debug satış)
                          const completedGridBot = {
                            ...gridTradingBot,
                            currentStep: 'completed' as const,
                            sellHash: 'completed',
                            isActive: false,
                            status: `⚠️ GRID BOT TAMAMLANDI! (DEBUG MODE - XLM Satış)
🔄 İŞLEM SIRASI TAMAMLANDI - DEBUG:
1️⃣ ALIM: ⚠️ $${gridTradingBot.buyPrice} (Satın alma başarılı olmamış olabilir)
2️⃣ SATIM: ✅ $${displayPrice.toFixed(4)} (XLM ile satış yapıldı)  
3️⃣ KAR TRANSFERİ: ✅ Ana cüzdana transfer edildi!

💰 Planlanan İşlem: ${gridTradingBot.amount} ${getAssetSymbol(autoTradeAssetIn)}
� Gerçek Satış: ${sellAmount} XLM (Debug Mode)
⚠️ UYARI: USDC bulunamadı, alım işlemi başarısız olmuş olabilir
📈 Fiyat Farkı: ${((displayPrice - parseFloat(gridTradingBot.buyPrice)) / parseFloat(gridTradingBot.buyPrice) * 100).toFixed(2)}%
🔧 Debug modunda Grid trading tamamlandı (sorun var)!`
                          };
                          
                          setGridTradingBot(completedGridBot);
                          localStorage.setItem(`grid_bot_${publicKey}`, JSON.stringify(completedGridBot));
                          
                          // 3 dakika sonra Grid Bot'u temizle (debug mode)
                          setTimeout(() => {
                            setGridTradingBot(null);
                            localStorage.removeItem(`grid_bot_${publicKey}`);
                          }, 3 * 60 * 1000);
                          
                        } catch (xlmSellError) {
                          console.error('XLM satış hatası:', xlmSellError);
                          setAutoTradeStatus(`❌ Grid Bot: XLM satış hatası: ${xlmSellError}`);
                          
                          // Grid Bot'u hata olarak işaretle
                          const errorGridBot = {
                            ...gridTradingBot,
                            status: `❌ Grid Bot Hatası: XLM satış başarısız - ${xlmSellError}`
                          };
                          setGridTradingBot(errorGridBot);
                          localStorage.setItem(`grid_bot_${publicKey}`, JSON.stringify(errorGridBot));
                        }
                        
                      } else {
                        console.log('❌ Yeterli XLM bulunamadı (min 2.5 XLM gerekiyor)');
                        setAutoTradeStatus('❌ Grid Bot: Satılabilir asset bulunamadı');
                        
                        // Grid Bot'u hata olarak işaretle
                        const errorGridBot = {
                          ...gridTradingBot,
                          status: `❌ Grid Bot Hatası: Bot cüzdanında satılabilir asset bulunamadı
                          
🔍 Bot Cüzdan Durumu:
- Bot ID: ${botWallet?.publicKey}
- Mevcut Balances: ${JSON.stringify(account.balances, null, 2)}
- Aranan Asset: USDC (${targetAssetInfo?.contract})
- XLM Balance: ${account.balances.find((b: any) => b.asset_type === 'native')?.balance || '0'} XLM

⚠️ Muhtemel sebep: Alım işlemi başarısız oldu ve USDC alınamadı`
                        };
                        setGridTradingBot(errorGridBot);
                        localStorage.setItem(`grid_bot_${publicKey}`, JSON.stringify(errorGridBot));
                      }
                    }
                    
                  } else {
                    console.log('⚠️ Hedef asset bulunamadı, USDC içeren asset aranıyor...');
                    
                    // Önce USDC içeren herhangi bir asset'i ara
                    const usdcAssets = account.balances.filter((balance: any) => {
                      const hasBalance = parseFloat(balance.balance) > 0.1;
                      
                      // USDC matching için farklı yöntemler deneyelim
                      const codeMatch = balance.asset_code && (
                        balance.asset_code.includes('USDC') ||
                        balance.asset_code.includes('USD') ||
                        balance.asset_code === 'USDC'
                      );
                      
                      // Contract address matching
                      const contractMatch = balance.asset_contract === 'CBBHRKEP5M3NUDRISGLJKGHDHX3DA2CN2AZBQY6WLVUJ7VNLGSKBDUCM' ||
                                          balance.asset === 'CBBHRKEP5M3NUDRISGLJKGHDHX3DA2CN2AZBQY6WLVUJ7VNLGSKBDUCM';
                      
                      // Issuer matching (geleneksel Stellar asset için)
                      const issuerMatch = balance.asset_issuer && balance.asset_code === 'USDC';
                      
                      const isUSDC = codeMatch || contractMatch || issuerMatch;
                      
                      console.log(`🔍 USDC check - Asset: ${balance.asset_code}, Type: ${balance.asset_type}, Contract: ${balance.asset_contract?.slice(0, 10)}..., hasBalance: ${hasBalance}, codeMatch: ${codeMatch}, contractMatch: ${contractMatch}, issuerMatch: ${issuerMatch}, isUSDC: ${isUSDC}`);
                      
                      return hasBalance && isUSDC;
                    });
                    
                    console.log('🔍 USDC içeren asset\'ler:', usdcAssets);
                    
                    if (usdcAssets.length > 0) {
                      // İlk USDC asset'ini seç
                      const usdcBalance = usdcAssets[0];
                      const sellAmount = (parseFloat(usdcBalance.balance) * 0.95).toFixed(4);
                      
                      console.log(`💸 Grid Bot USDC bulundu: ${sellAmount} ${usdcBalance.asset_code} satılacak`);
                      
                      setAutoTradeStatus(`🔄 Grid Bot: USDC asset bulundu, ${usdcBalance.asset_code} satılıyor...`);
                      
                      // Grid Bot özel satım fonksiyonuyla sat (transfer = true)
                      await executeGridBotTrade('sell', sellAmount, gridTradingBot.sellPrice, true);
                      
                      // Grid bot'u tamamlandı olarak işaretle (USDC satım)
                      const completedGridBot = {
                        ...gridTradingBot,
                        currentStep: 'completed' as const,
                        sellHash: 'completed',
                        isActive: false,
                        status: `✅ GRID BOT TAMAMLANDI! (USDC Bulundu)
🔄 İŞLEM SIRASI TAMAMLANDI:
1️⃣ ALIM: ✅ $${gridTradingBot.buyPrice} (≤ eşit veya altında tetiklendi)
2️⃣ SATIM: ✅ $${displayPrice.toFixed(4)} (≥ eşit veya üstünde tetiklendi)  
3️⃣ KAR TRANSFERİ: ✅ Ana cüzdana transfer edildi!

💰 İşlem Miktarı: ${gridTradingBot.amount} ${getAssetSymbol(autoTradeAssetIn)}
💸 Satılan USDC: ${sellAmount} ${usdcBalance.asset_code}
✅ Not: USDC asset başarıyla bulundu ve satıldı
📈 Gerçekleşen Kar: ${((displayPrice - parseFloat(gridTradingBot.buyPrice)) / parseFloat(gridTradingBot.buyPrice) * 100).toFixed(2)}%
🎉 Grid trading döngüsü başarıyla tamamlandı!`
                      };
                      
                      setGridTradingBot(completedGridBot);
                      localStorage.setItem(`grid_bot_${publicKey}`, JSON.stringify(completedGridBot));
                      
                      // 5 dakika sonra Grid Bot'u temizle
                      setTimeout(() => {
                        setGridTradingBot(null);
                        localStorage.removeItem(`grid_bot_${publicKey}`);
                      }, 5 * 60 * 1000);
                      
                    } else {
                      console.log('⚠️ USDC asset bulunamadı, XLM satışı deneniyor...');
                      
                      // XLM satışına izin ver (Grid Bot debug modu)
                      const xlmBalance = account.balances.find((balance: any) => 
                        balance.asset_type === 'native' && parseFloat(balance.balance) > 2.0 // Min 2 XLM rezerv
                      );
                      
                      if (xlmBalance) {
                        // XLM'nin %80'ini sat (rezerv bırak)
                        const sellAmount = (parseFloat(xlmBalance.balance) * 0.8).toFixed(4);
                        
                        console.log(`💸 Grid Bot XLM Satış: ${sellAmount} XLM satılacak (Debug modu)`);
                        
                        setAutoTradeStatus(`🔄 Grid Bot: USDC bulunamadı, XLM satışı yapılıyor (Debug)...`);
                        
                        // Grid Bot özel satım fonksiyonuyla XLM sat (transfer = true)
                        try {
                          await executeGridBotTrade('sell', sellAmount, gridTradingBot.sellPrice, true);
                          
                          // Grid bot'u tamamlandı olarak işaretle (XLM satım)
                          const completedGridBot = {
                            ...gridTradingBot,
                            currentStep: 'completed' as const,
                            sellHash: 'completed',
                            isActive: false,
                            status: `✅ GRID BOT TAMAMLANDI! (XLM Debug Satış)
🔄 İŞLEM SIRASI TAMAMLANDI:
1️⃣ ALIM: ✅ $${gridTradingBot.buyPrice} (≤ eşit veya altında tetiklendi)
2️⃣ SATIM: ✅ $${displayPrice.toFixed(4)} (≥ eşit veya üstünde tetiklendi)  
3️⃣ KAR TRANSFERİ: ✅ Ana cüzdana transfer edildi!

💰 İşlem Miktarı: ${gridTradingBot.amount} ${getAssetSymbol(autoTradeAssetIn)}
💸 Satılan XLM: ${sellAmount} XLM (Debug Mode)
⚠️ Not: USDC bulunamadı, XLM satıldı (alım işlemi başarısız olmuş olabilir)
📈 Gerçekleşen İşlem: ${((displayPrice - parseFloat(gridTradingBot.buyPrice)) / parseFloat(gridTradingBot.buyPrice) * 100).toFixed(2)}%
🎉 Grid trading döngüsü tamamlandı (Debug)!`
                          };
                          
                          setGridTradingBot(completedGridBot);
                          localStorage.setItem(`grid_bot_${publicKey}`, JSON.stringify(completedGridBot));
                          
                          // 5 dakika sonra Grid Bot'u temizle
                          setTimeout(() => {
                            setGridTradingBot(null);
                            localStorage.removeItem(`grid_bot_${publicKey}`);
                          }, 5 * 60 * 1000);
                          
                        } catch (xlmSellError) {
                          console.error('XLM satış hatası:', xlmSellError);
                          setAutoTradeStatus(`❌ Grid Bot: XLM satış hatası: ${xlmSellError}`);
                        }
                        
                      } else {
                        console.log('⚠️ XLM yetersiz (min 2 XLM gerekli), alternatif arama yapılıyor...');
                        
                        // Alternatif: En yüksek balance'lı non-XLM asset'i sat
                        const nonXLMAssets = account.balances.filter((balance: any) => 
                          balance.asset_type !== 'native' && 
                          parseFloat(balance.balance) > 0.1
                        );
                        
                        console.log('🔍 Mevcut non-XLM asset\'ler:', nonXLMAssets);
                        
                        if (nonXLMAssets.length > 0) {
                          // En yüksek balance'lı asset'i seç
                          const highestBalance = nonXLMAssets.reduce((prev: any, current: any) => 
                            parseFloat(current.balance) > parseFloat(prev.balance) ? current : prev
                          );
                          
                          const sellAmount = (parseFloat(highestBalance.balance) * 0.95).toFixed(4);
                          
                          console.log(`💸 Grid Bot Alternatif: ${sellAmount} ${highestBalance.asset_code} satılacak`);
                          
                          setAutoTradeStatus(`🔄 Grid Bot: Hedef asset bulunamadı, ${highestBalance.asset_code} satılıyor...`);
                          
                          try {
                            // Grid Bot özel satım fonksiyonuyla sat (transfer = true)
                            await executeGridBotTrade('sell', sellAmount, gridTradingBot.sellPrice, true);
                            
                            // Grid bot'u tamamlandı olarak işaretle (alternatif asset satım)
                            const completedGridBot = {
                              ...gridTradingBot,
                              currentStep: 'completed' as const,
                              sellHash: 'completed',
                              isActive: false,
                              status: `✅ GRID BOT TAMAMLANDI! (Alternatif Asset Satış)
🔄 İŞLEM SIRASI TAMAMLANDI:
1️⃣ ALIM: ✅ $${gridTradingBot.buyPrice} (≤ eşit veya altında tetiklendi)
2️⃣ SATIM: ✅ $${displayPrice.toFixed(4)} (≥ eşit veya üstünde tetiklendi)  
3️⃣ KAR TRANSFERİ: ✅ Ana cüzdana transfer edildi!

💰 İşlem Miktarı: ${gridTradingBot.amount} ${getAssetSymbol(autoTradeAssetIn)}
💸 Satılan Asset: ${sellAmount} ${highestBalance.asset_code}
⚠️ Not: USDC bulunamadı, alternatif asset satıldı
📈 Gerçekleşen İşlem: ${((displayPrice - parseFloat(gridTradingBot.buyPrice)) / parseFloat(gridTradingBot.buyPrice) * 100).toFixed(2)}%
🎉 Grid trading döngüsü tamamlandı (Alternatif)!`
                            };
                            
                            setGridTradingBot(completedGridBot);
                            localStorage.setItem(`grid_bot_${publicKey}`, JSON.stringify(completedGridBot));
                            
                            // 5 dakika sonra Grid Bot'u temizle
                            setTimeout(() => {
                              setGridTradingBot(null);
                              localStorage.removeItem(`grid_bot_${publicKey}`);
                            }, 5 * 60 * 1000);
                            
                          } catch (altSellError) {
                            console.error('Alternatif asset satış hatası:', altSellError);
                            setAutoTradeStatus(`❌ Grid Bot: Alternatif asset satış hatası: ${altSellError}`);
                          }
                          
                        } else {
                          console.log('❌ Satılabilir hiçbir asset bulunamadı');
                          setAutoTradeStatus('❌ Grid Bot: Satılabilir asset bulunamadı');
                          
                          // Grid Bot'u hata olarak işaretle
                          const errorGridBot = {
                            ...gridTradingBot,
                            status: '❌ Grid Bot Hatası: Satılabilir asset bulunamadı'
                          };
                          setGridTradingBot(errorGridBot);
                          localStorage.setItem(`grid_bot_${publicKey}`, JSON.stringify(errorGridBot));
                        }
                      }
                    }
                        
                        // Grid bot'u tamamlandı olarak işaretle (alternatif satım)
                        const completedGridBot = {
                          ...gridTradingBot,
                          currentStep: 'completed' as const,
                          sellHash: 'completed',
                          isActive: false,
                          status: `✅ GRID BOT TAMAMLANDI! (Alternatif Satım)
🔄 İŞLEM SIRASI TAMAMLANDI:
1️⃣ ALIM: ✅ $${gridTradingBot.buyPrice} (≤ eşit veya altında tetiklendi)
2️⃣ SATIM: ✅ $${displayPrice.toFixed(4)} (≥ eşit veya üstünde tetiklendi)  
3️⃣ KAR TRANSFERİ: ✅ Ana cüzdana transfer edildi!

💰 İşlem Miktarı: ${gridTradingBot.amount} ${getAssetSymbol(autoTradeAssetIn)}
💸 Satılan Token: ${sellAmount} ${highestBalance.asset_code}
⚠️ Not: Hedef ${getAssetSymbol(autoTradeAssetOut)} bulunamadı, ${highestBalance.asset_code} satıldı
📈 Gerçekleşen Kar: ${((displayPrice - parseFloat(gridTradingBot.buyPrice)) / parseFloat(gridTradingBot.buyPrice) * 100).toFixed(2)}%
🎉 Grid trading döngüsü başarıyla tamamlandı!`
                        };
                        
                        setGridTradingBot(completedGridBot);
                        localStorage.setItem(`grid_bot_${publicKey}`, JSON.stringify(completedGridBot));
                        
                        // 5 dakika sonra Grid Bot'u temizle
                        setTimeout(() => {
                          setGridTradingBot(null);
                          localStorage.removeItem(`grid_bot_${publicKey}`);
                        }, 5 * 60 * 1000);
                        
                      } else {
                        // USDC bulunamadı, XLM satışı yapılacak (Debug Mode)
                        console.log('❌ USDC bulunamadı, XLM satışı yapılıyor...');
                        
                        const xlmBalance = account.balances.find((balance: any) => 
                          balance.asset_type === 'native' && parseFloat(balance.balance) > 2.0
                        );
                        
                        if (xlmBalance) {
                          const sellAmount = (parseFloat(xlmBalance.balance) * 0.7).toFixed(4);
                          console.log(`💸 Grid Bot Debug: ${sellAmount} XLM satılacak`);
                          
                          await executeGridBotTrade('sell', sellAmount, gridTradingBot.sellPrice, true);
                          
                          // Grid bot'u tamamlandı olarak işaretle
                          const completedGridBot = {
                            ...gridTradingBot,
                            currentStep: 'completed' as const,
                            sellHash: 'completed',
                            isActive: false,
                            status: `⚠️ GRID BOT TAMAMLANDI! (DEBUG - XLM Satış)
� İŞLEM SIRASI TAMAMLANDI:
1️⃣ ALIM: ⚠️ $${gridTradingBot.buyPrice} (USDC alımı başarısız olmuş olabilir)
2️⃣ SATIM: ✅ $${displayPrice.toFixed(4)} (XLM ile debug satış)
3️⃣ KAR TRANSFERİ: ✅ Ana cüzdana transfer edildi!

💰 Planlanan: ${gridTradingBot.amount} ${getAssetSymbol(autoTradeAssetIn)}
💸 Gerçek Satış: ${sellAmount} XLM (Debug Mode)
⚠️ UYARI: USDC bulunamadı, muhtemelen alım başarısız oldu
🔧 Debug modunda Grid trading tamamlandı!`
                          };
                          
                          setGridTradingBot(completedGridBot);
                          localStorage.setItem(`grid_bot_${publicKey}`, JSON.stringify(completedGridBot));
                          
                          setTimeout(() => {
                            setGridTradingBot(null);
                            localStorage.removeItem(`grid_bot_${publicKey}`);
                          }, 3 * 60 * 1000);
                          
                        } else {
                          console.log('❌ XLM yetersiz');
                          setAutoTradeStatus('❌ Grid Bot: Satılabilir asset bulunamadı');
                          
                          const errorGridBot = {
                            ...gridTradingBot,
                            isActive: false,
                            status: `❌ GRID BOT HATASI!
🔍 Satılacak asset bulunamadı
🤖 Bot cüzdanında yeterli token yok
📊 Debug: Bot Balances = ${JSON.stringify(account.balances.map((b: any) => ({type: b.asset_type, code: b.asset_code, balance: b.balance})))}`
                          };
                          
                          setGridTradingBot(errorGridBot);
                          localStorage.setItem(`grid_bot_${publicKey}`, JSON.stringify(errorGridBot));
                        }
                      }
                    }
                  }
                    
                }
              }
            } catch (error) {
              console.error('Grid bot satım hatası:', error);
              setAutoTradeStatus(`❌ Grid Bot satım hatası: ${error}`);
            }
          }
        }
        
        // Geçerlilik süresi kontrolü
        if (preAuthBuyOrder && now > preAuthBuyOrder.expiry) {
          setPreAuthBuyOrder(null);
          localStorage.removeItem(`preauth_buy_${publicKey}`);
          setAutoTradeStatus('⏰ Pre-auth alım emri süresi doldu. Yeniden onaylayın.');
        }
        
        if (preAuthSellOrder && now > preAuthSellOrder.expiry) {
          setPreAuthSellOrder(null);
          localStorage.removeItem(`preauth_sell_${publicKey}`);
          setAutoTradeStatus('⏰ Pre-auth satım emri süresi doldu. Yeniden onaylayın.');
        }
        
        if (gridTradingBot && now > gridTradingBot.expiry) {
          setGridTradingBot(null);
          localStorage.removeItem(`grid_bot_${publicKey}`);
          setAutoTradeStatus('⏰ Grid trading bot süresi doldu. Yeniden oluşturun.');
        }
        
      } catch (error: unknown) {
        console.error('❌ Pre-auth işlem kontrolü hatası:', error);
        const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen hata';
        setAutoTradeStatus(`❌ Kontrol hatası: ${errorMessage}`);
      }
    };

    checkPreAuthTrade();
  }, [displayPrice, isAutoTradingEnabled, isConnected, isTrading, preAuthBuyOrder, preAuthSellOrder, gridTradingBot, hasAutoTradeError, executeBotTrade, executeGridBotTrade, publicKey, botWallet, autoTradeAssetIn, autoTradeAssetOut, getAssetSymbol]);



  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
      {/* Header */}
      <div className="bg-white/10 backdrop-blur-md border-b border-white/20 sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500 rounded-xl flex items-center justify-center shadow-lg">
                <span className="text-white font-bold text-lg">🤖</span>
              </div>
              <h1 className="text-2xl font-bold bg-gradient-to-r from-white via-blue-100 to-purple-100 bg-clip-text text-transparent">
                Pre-Auth Bot Trader
              </h1>
            </div>
            
            {/* Wallet Connection Status */}
            <div className="flex items-center space-x-4">
              {isConnected && publicKey ? (
                <div className="flex items-center space-x-3 bg-emerald-500/20 text-emerald-100 px-4 py-2 rounded-full text-sm backdrop-blur-sm border border-emerald-400/30">
                  <div className="w-3 h-3 bg-emerald-400 rounded-full animate-pulse"></div>
                  <div className="flex flex-col">
                    <span className="font-medium text-xs text-emerald-300">Bağlandı</span>
                    <span className="font-mono text-xs">
                      {publicKey.slice(0, 8)}...{publicKey.slice(-6)}
                    </span>
                  </div>
                </div>
              ) : (
                <button
                  onClick={connectWallet}
                  disabled={!isAvailable}
                  className="bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 hover:from-blue-600 hover:via-purple-600 hover:to-pink-600 disabled:from-gray-500 disabled:to-gray-600 text-white px-6 py-2.5 rounded-full font-medium transition-all duration-300 shadow-lg hover:shadow-xl hover:scale-105 backdrop-blur-sm"
                >
                  {isAvailable ? 'Connect Freighter' : 'Install Freighter'}
                </button>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-4xl mx-auto px-4 py-8 space-y-6 relative z-10">
        {!isConnected ? (
          /* Wallet Connection Screen */
          <div className="text-center py-20">
            <div className="w-32 h-32 bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500 rounded-3xl mx-auto mb-8 flex items-center justify-center shadow-2xl animate-pulse">
              <span className="text-6xl">🤖</span>
            </div>
            <h2 className="text-4xl font-bold mb-6 bg-gradient-to-r from-white via-blue-100 to-purple-100 bg-clip-text text-transparent">
              Connect Your Wallet
            </h2>
            <p className="text-gray-300 mb-10 text-xl max-w-md mx-auto leading-relaxed">
              Connect your Freighter wallet to start automated price-based trading
            </p>
            <button
              onClick={connectWallet}
              disabled={!isAvailable}
              className="bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 hover:from-blue-600 hover:via-purple-600 hover:to-pink-600 disabled:from-gray-500 disabled:to-gray-600 text-white px-10 py-5 rounded-2xl font-semibold text-xl transition-all duration-300 shadow-2xl hover:shadow-3xl hover:scale-105 transform"
            >
              {isAvailable ? '🚀 Connect Freighter Wallet' : '⬇️ Install Freighter'}
            </button>
            {!isAvailable && (
              <div className="mt-6 text-gray-400">
                <p>Install Freighter browser extension first</p>
                <a href="https://freighter.app/" target="_blank" rel="noopener noreferrer" className="text-blue-400 hover:text-blue-300 underline">
                  Download Freighter
                </a>
              </div>
            )}
          </div>
        ) : (
          /* Trading Interface */
          <>
        <div className="text-center mb-8">
          <h2 className="text-4xl font-bold bg-gradient-to-r from-white via-blue-100 to-purple-100 bg-clip-text text-transparent mb-2">
            Fiyat Bazlı Otomatik İşlem
          </h2>
          <p className="text-gray-300">
            Basit Pre-Authorization Sistemi
          </p>
        </div>

        {/* 🤖 Bot Güvenlik Modeli */}
        <Card className="bg-green-50 border-green-200">
          <div className="text-sm">
            <h3 className="font-bold text-green-800 mb-3">🤖 Bot Wallet Sistemi</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <h4 className="font-semibold mb-2">👤 Manuel Mod:</h4>
                <ul className="space-y-1 text-green-700">
                  <li>• Ana cüzdanınızdan para çıkar</li>
                  <li>• Her işlemde imza gerekir</li>
                  <li>• PC başında olmanız gerekir</li>
                  <li>• Freighter popup açılır</li>
                </ul>
              </div>
              <div>
                <h4 className="font-semibold mb-2">🤖 Otomatik Mod:</h4>
                <ul className="space-y-1 text-green-700">
                  <li>• Bot cüzdanından para çıkar</li>
                  <li>• Bot otomatik imza atar</li>
                  <li>• PC kapalı olabilir</li>
                  <li>• Tamamen otonom çalışır</li>
                  <li>• Bot cüzdanına XLM transfer gerekli</li>
                  <li>• <strong>💸 Kazanç özel adrese transfer!</strong></li>
                </ul>
              </div>
            </div>
          </div>
        </Card>

        {/* 🔗 Wallet Bağlantı Durumu */}
        <Card className={`${isConnected ? 'bg-blue-50 border-blue-200' : 'bg-yellow-50 border-yellow-200'}`}>
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className={`w-3 h-3 rounded-full ${isConnected ? 'bg-green-500' : 'bg-yellow-500'}`}></div>
              <div>
                <h3 className="font-semibold text-gray-800">
                  {isConnected ? '✅ Freighter Bağlandı' : '🔗 Freighter Bağlantısı'}
                </h3>
                {isConnected && publicKey ? (
                  <p className="text-sm text-gray-600">
                    {publicKey.substring(0, 4)}...{publicKey.substring(publicKey.length - 4)}
                  </p>
                ) : (
                  <p className="text-sm text-gray-600">Cüzdan bağlantısı gerekli</p>
                )}
              </div>
            </div>
            {!isConnected && (
              <button
                onClick={async () => {
                  try {
                    await connect();
                  } catch (error) {
                    console.error('Bağlantı hatası:', error);
                  }
                }}
                disabled={!isAvailable}
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
              >
                {isAvailable ? 'Cüzdan Bağla' : 'Freighter Yükle'}
              </button>
            )}
            {isConnected && (
              <div className="text-sm text-green-600 font-medium">
                Manuel ve Bot modları kullanılabilir
              </div>
            )}
          </div>
          {freighterError && (
            <div className="mt-3 p-2 bg-red-100 border border-red-200 rounded">
              <p className="text-sm text-red-700">❌ {freighterError}</p>
            </div>
          )}
        </Card>

        {/* Hata/Durum Göstergeleri */}
        {error && (
          <Card className="bg-red-50 border border-red-200">
            <div className="text-red-700"><strong>Hata:</strong> {error}</div>
          </Card>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Sol Panel - Fiyat ve Durum */}
          <div className="space-y-4">
            <PriceDisplay
              price={displayPrice}
              lastUpdate={lastUpdate}
              isTracking={isTracking && !manualPriceMode}
            />

            {/* Manuel Fiyat Kontrolü */}
            <Card title="📊 Fiyat Kontrolü">
              <div className="space-y-3">
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="manualPriceMode"
                    checked={manualPriceMode}
                    onChange={(e) => setManualPriceMode(e.target.checked)}
                    className="rounded border-gray-300"
                  />
                  <label htmlFor="manualPriceMode" className="text-sm font-medium">
                    Manuel Fiyat Modu
                  </label>
                </div>
                
                {manualPriceMode ? (
                  <div className="space-y-2">
                    <input
                      type="number"
                      step="0.0001"
                      placeholder="XLM fiyatı girin ($)"
                      value={manualPrice}
                      onChange={(e) => setManualPrice(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                    <div className="text-xs text-gray-500">
                      Manuel mod: Gerçek fiyat takibi durdu
                    </div>
                  </div>
                ) : (
                  <div className="text-xs text-gray-500">
                    Otomatik mod: Gerçek zamanlı fiyat takibi
                  </div>
                )}
              </div>
            </Card>

            {/* Takip Kontrolleri */}
            <Card title="📊 Fiyat Takibi">
              <div className="space-y-3">
                {!isTracking ? (
                  <Button 
                    onClick={() => startTracking(15000)} 
                    variant="success" 
                    className="w-full"
                    disabled={manualPriceMode}
                  >
                    ▶️ Takibi Başlat (5s)
                  </Button>
                ) : (
                  <Button onClick={stopTracking} variant="error" className="w-full">
                    ⏹️ Takibi Durdur
                  </Button>
                )}
              </div>
            </Card>

            {/* Freighter Wallet */}
            <Card title="🌌 Freighter Wallet" className="bg-purple-50 border-purple-200">
              <div className="space-y-3">
                <div className="text-xs bg-white p-3 rounded border">
                  <div className="flex items-center gap-2 mb-2">
                    <span className={`w-3 h-3 rounded-full ${isAvailable ? 'bg-green-500' : 'bg-red-500'}`}></span>
                    <span className="font-medium">Freighter: {isAvailable ? '✅ Yüklü' : '❌ Yüklü değil'}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className={`w-3 h-3 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`}></span>
                    <span className="font-medium">Bağlantı: {isConnected ? '✅ Bağlı' : '❌ Bağlı değil'}</span>
                  </div>
                  {publicKey && (
                    <div className="text-xs text-gray-600 mt-2 p-2 bg-gray-50 rounded">
                      <div className="font-mono break-all">
                        {publicKey.slice(0, 10)}...{publicKey.slice(-10)}
                      </div>
                    </div>
                  )}
                  {freighterError && (
                    <div className="mt-2 p-2 bg-red-50 rounded border-l-4 border-red-400">
                      <div className="text-xs text-red-700">
                        <strong>Hata:</strong> {freighterError}
                      </div>
                    </div>
                  )}
                </div>

                {!isConnected && (
                  <div className="space-y-2">
                    <Button onClick={connectWallet} disabled={!isAvailable} className="w-full" variant="success">
                      🔗 Freighter&apos;a Bağlan
                    </Button>
                    <div className="text-xs bg-yellow-100 p-2 rounded text-yellow-700">
                      ⚠️ <strong>localhost bağlantı sorunu:</strong> Eğer &quot;domain not connected&quot; hatası alıyorsanız, bu butona basarak yeniden bağlanın.
                    </div>
                  </div>
                )}
              </div>
            </Card>

            {/* Bot Wallet Sistemi */}
            <Card title="🤖 Bot Wallet (Tam Otomatik)" className="bg-blue-50 border-blue-200">
              <div className="space-y-3">
                <div className="flex items-center gap-2 mb-3">
                  <label className="text-sm font-medium">Bot Modu:</label>
                  <select 
                    value={botMode} 
                    onChange={(e) => setBotMode(e.target.value as 'manual' | 'auto')}
                    className="px-2 py-1 border rounded text-sm"
                    disabled={!isConnected}
                  >
                    <option value="manual">👤 Manuel (Kullanıcı İmza)</option>
                    <option value="auto">🤖 Otomatik (Bot İmza)</option>
                  </select>
                </div>

                {botMode === 'auto' && (
                  <div className="space-y-3">
                    {!botWallet ? (
                      <div className="space-y-2">
                        <div className="text-sm bg-yellow-100 p-2 rounded text-yellow-800">
                          ⚠️ Bot wallet oluşturun ve XLM transfer edin
                        </div>
                        <Button 
                          onClick={createBotWallet} 
                          disabled={!isConnected} 
                          className="w-full" 
                          variant="success"
                        >
                          🤖 Bot Wallet Oluştur
                        </Button>
                      </div>
                    ) : (
                      <div className="space-y-2">
                        <div className="text-xs bg-blue-100 p-2 rounded border">
                          <div className="font-medium text-blue-800">🤖 Bot Wallet Aktif</div>
                          <div className="font-mono text-xs mt-1 break-all">
                            <strong>Public Key:</strong><br/>
                            {botWallet.publicKey}
                          </div>
                          <div className="font-mono text-xs mt-2 break-all">
                            <strong>Secret Key:</strong><br/>
                            <span className="text-red-600 bg-red-50 p-1 rounded">
                              {botWallet.secretKey}
                            </span>
                          </div>
                          <div className="mt-2">
                            <span className="font-medium">Balance: </span>
                            <span className={`font-mono ${botBalance > 0 ? 'text-green-600' : 'text-red-600'}`}>
                              {botBalance.toFixed(2)} XLM
                            </span>
                          </div>
                        </div>
                        
                        {botBalance === 0 && (
                          <div className="text-xs bg-red-100 p-2 rounded text-red-700">
                            ❌ Bot wallet&apos;a minimum 2 XLM transfer edin!
                          </div>
                        )}
                        
                        {botBalance > 0 && botBalance < 2 && (
                          <div className="text-xs bg-yellow-100 p-2 rounded text-yellow-700">
                            ⚠️ Düşük bakiye! Minimum 2 XLM önerilir (Mevcut: {botBalance.toFixed(2)} XLM)
                          </div>
                        )}
                        
                        {botBalance >= 2 && (
                          <div className="text-xs bg-green-100 p-2 rounded text-green-700">
                            ✅ Bot wallet hazır! İşlem yapabilir.
                          </div>
                        )}
                        
                        <div className="text-xs bg-yellow-100 p-2 rounded text-yellow-800">
                          ⚠️ <strong>GÜVENLİK:</strong> Secret key&apos;i kimseyle paylaşmayın!
                        </div>
                        
                        <div className="flex gap-2">
                          <Button 
                            onClick={() => checkBotBalance(botWallet.publicKey)} 
                            size="sm" 
                            className="flex-1"
                          >
                            🔄 Balance
                          </Button>
                          <Button 
                            onClick={async () => {
                              try {
                                setAutoTradeStatus('🧪 Test transfer başlatılıyor...');
                                // Test transfer - bot'daki tüm XLM'i transfer et
                                await transferProfitToMainWallet(
                                  'native',
                                  botWallet,
                                  customWalletAddress
                                );
                                setAutoTradeStatus('✅ Test transfer tamamlandı!');
                              } catch (error) {
                                setAutoTradeStatus(`❌ Test transfer hatası: ${error}`);
                              }
                            }} 
                            size="sm" 
                            variant="success"
                            className="flex-1"
                          >
                            🧪 Test Transfer
                          </Button>
                        </div>
                        
                        <div className="flex gap-2">
                          <Button 
                            onClick={() => {
                              navigator.clipboard.writeText(botWallet.publicKey);
                              alert('Public Key kopyalandı!');
                            }} 
                            size="sm" 
                            className="flex-1"
                          >
                            � Public
                          </Button>
                          <Button 
                            onClick={() => {
                              navigator.clipboard.writeText(botWallet.secretKey);
                              alert('Secret Key kopyalandı!');
                            }} 
                            size="sm" 
                            variant="error"
                            className="flex-1"
                          >
                            � Secret Key
                          </Button>
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {botMode === 'manual' && (
                  <div className="text-xs bg-gray-100 p-2 rounded text-gray-600">
                    👤 Manuel modda kullanıcı her işlem için imza atar
                  </div>
                )}
              </div>
            </Card>

            {/* Telegram Kurulum */}
            <Card title="📱 Telegram">
              <div className="space-y-3">
                <input
                  type="text"
                  value={telegramChatId}
                  onChange={(e) => {
                    setTelegramChatId(e.target.value);
                    localStorage.setItem('telegram_chat_id', e.target.value);
                  }}
                  className="w-full px-3 py-2 border border-gray-300 rounded text-sm"
                  placeholder="Chat ID (@userinfobot)"
                />
                <div className="text-xs text-gray-500">
                  @userinfobot&apos;tan Chat ID alın
                </div>
              </div>
            </Card>

            {/* Custom Wallet Address */}
            <Card title="💰 Kazanç Cüzdanı" className="bg-orange-50 border-orange-200">
              <div className="space-y-3">
                <div>
                  <label className="block text-sm font-medium mb-1 text-orange-800">
                    Kazanç Gönderilecek Cüzdan Adresi:
                  </label>
                  <input
                    type="text"
                    value={customWalletAddress}
                    onChange={(e) => {
                      setCustomWalletAddress(e.target.value);
                      localStorage.setItem('custom_wallet_address', e.target.value);
                    }}
                    className="w-full px-3 py-2 border border-orange-300 rounded text-sm font-mono"
                    placeholder="GXXX...XXXX (Stellar Address)"
                  />
                </div>
                <div className="text-xs text-orange-700 bg-orange-100 p-2 rounded">
                  <div className="font-semibold mb-1">💸 Önemli Bilgi:</div>
                  <div>Bot otomatik modda tüm kazancı bu adrese gönderir.</div>
                  <div>Bu adres Freighter wallet adresinizden farklı olabilir.</div>
                </div>
                {customWalletAddress && (
                  <div className="text-xs text-gray-600 bg-gray-50 p-2 rounded">
                    <div className="font-semibold">Mevcut Kazanç Adresi:</div>
                    <div className="font-mono break-all mt-1">
                      {customWalletAddress}
                    </div>
                  </div>
                )}
              </div>
            </Card>
          </div>

          {/* Sağ Panel - 🎯 Fiyat Bazlı Otomatik İşlem (Ana Odak) */}
          <div className="lg:col-span-2">
            <Card title="🎯 Fiyat Bazlı Otomatik İşlem" className="bg-gradient-to-r from-green-50 to-blue-50 border-2 border-green-300">
              {isConnected ? (
                <div className="space-y-6">
                  {/* Otomatik İşlem Toggle */}
                  <div className="flex items-center justify-between p-4 bg-white rounded-lg border-2 border-gray-200">
                    <div>
                      <h3 className="font-bold text-lg">🤖 Otomatik İşlem Sistemi</h3>
                      <p className="text-sm text-gray-600">Belirlediğiniz fiyatlarda otomatik alım-satım (Pre-Authorization)</p>
                    </div>
                    <div className="flex items-center gap-3">
                      {hasAutoTradeError && (
                        <Button
                          onClick={() => {
                            setHasAutoTradeError(false);
                            setAutoTradeStatus('✅ Sistem sıfırlandı, hazır.');
                            setIsAutoTradingEnabled(true);
                            setBuyTargetPrice('');
                            setSellTargetPrice('');
                            setAutoBuyAmount('');
                            setAutoSellAmount('');
                          }}
                          size="sm"
                          variant="success"
                        >
                          🔄 Reset
                        </Button>
                      )}
                      <label className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          checked={isAutoTradingEnabled}
                          onChange={(e) => {
                            setIsAutoTradingEnabled(e.target.checked);
                            if (e.target.checked && hasAutoTradeError) {
                              setHasAutoTradeError(false);
                              setAutoTradeStatus(null);
                            }
                          }}
                          className="rounded"
                          disabled={isTrading}
                        />
                        <span className={`font-medium ${isAutoTradingEnabled ? 'text-green-600' : 'text-gray-500'}`}>
                          {isAutoTradingEnabled ? '🟢 AKTİF' : '⚪ PASİF'}
                        </span>
                      </label>
                    </div>
                  </div>

                  {/* Trading Pair Seçimi */}
                  <div className="p-4 bg-gray-50 rounded-lg border">
                    <h4 className="font-semibold mb-3">🔄 Trading Pair</h4>
                    <div className="grid grid-cols-3 gap-2 items-center">
                      <select
                        value={autoTradeAssetIn}
                        onChange={(e) => setAutoTradeAssetIn(e.target.value)}
                        className="px-3 py-2 border border-gray-300 rounded"
                        disabled={isTrading}
                      >
                        {ASSET_OPTIONS.map((asset) => (
                          <option key={asset.value} value={asset.value}>
                            {asset.symbol}
                          </option>
                        ))}
                      </select>
                      <div className="text-center">
                        <button
                          onClick={() => {
                            const temp = autoTradeAssetIn;
                            setAutoTradeAssetIn(autoTradeAssetOut);
                            setAutoTradeAssetOut(temp);
                          }}
                          className="bg-blue-100 hover:bg-blue-200 p-2 rounded-full"
                          disabled={isTrading}
                        >
                          ↔️
                        </button>
                      </div>
                      <select
                        value={autoTradeAssetOut}
                        onChange={(e) => setAutoTradeAssetOut(e.target.value)}
                        className="px-3 py-2 border border-gray-300 rounded"
                        disabled={isTrading}
                      >
                        {ASSET_OPTIONS.map((asset) => (
                          <option key={asset.value} value={asset.value}>
                            {asset.symbol}
                          </option>
                        ))}
                      </select>
                    </div>
                    <div className="text-center mt-2 text-sm text-gray-600">
                      {ASSET_OPTIONS.find(a => a.value === autoTradeAssetIn)?.symbol}/{ASSET_OPTIONS.find(a => a.value === autoTradeAssetOut)?.symbol}
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {/* Alım Ayarları */}
                    <div className="p-4 bg-green-50 rounded-lg border-2 border-green-200">
                      <h4 className="font-semibold text-green-800 mb-3">💰 Otomatik Alım</h4>
                      <div className="space-y-3">
                        <div>
                          <label className="block text-sm font-medium mb-1">Hedef Fiyat ($)</label>
                          <input
                            type="number"
                            step="0.0001"
                            placeholder="0.1200"
                            value={buyTargetPrice}
                            onChange={(e) => setBuyTargetPrice(e.target.value)}
                            className="w-full px-3 py-2 border border-green-300 rounded"
                            disabled={isTrading || !isAutoTradingEnabled}
                          />
                          <p className="text-xs text-green-600 mt-1">
                            Fiyat ≤ Bu değerde al
                          </p>
                        </div>
                        <div>
                          <label className="block text-sm font-medium mb-1">
                            Miktar ({ASSET_OPTIONS.find(a => a.value === autoTradeAssetIn)?.symbol})
                          </label>
                          <input
                            type="number"
                            min="1"
                            step="1"
                            placeholder="10"
                            value={autoBuyAmount}
                            onChange={(e) => setAutoBuyAmount(e.target.value)}
                            className="w-full px-3 py-2 border border-green-300 rounded"
                            disabled={isTrading || !isAutoTradingEnabled}
                          />
                        </div>
                        {buyTargetPrice && (
                          <div className={`text-sm p-2 rounded ${displayPrice <= parseFloat(buyTargetPrice) ? 'bg-green-200 text-green-800 font-bold' : 'bg-gray-100 text-gray-600'}`}>
                            {displayPrice <= parseFloat(buyTargetPrice) ? '🎯 HEDEF ULAŞILDI!' : '⏳ Hedef bekleniyor...'}
                          </div>
                        )}
                        
                        {/* Pre-Authorization Button */}
                        <div className="space-y-2">
                          {!preAuthBuyOrder ? (
                            <div className="space-y-2">
                              {/* Manuel Mod Butonu */}
                              <Button
                                onClick={() => createPreAuthBuyOrder(false)}
                                disabled={!buyTargetPrice || !autoBuyAmount || !isConnected}
                                size="sm"
                                variant="secondary"
                                className="w-full"
                              >
                                👤 Manuel Alım Emri
                              </Button>
                              
                              {/* Bot Mod Butonu */}
                              {botMode === 'auto' && botWallet ? (
                                <div className="space-y-2">
                                  <Button
                                    onClick={() => createPreAuthBuyOrder(true)}
                                    disabled={!buyTargetPrice || !autoBuyAmount || !isConnected}
                                    size="sm"
                                    variant="success"
                                    className="w-full"
                                  >
                                    🤖 Bot Alım Emri (XLM Transfer)
                                  </Button>
                                  {!isConnected && (
                                    <div className="text-xs bg-red-100 p-2 rounded text-red-700 border">
                                      ⚠️ Freighter bağlantısı gerekli! Butona basınca otomatik bağlanır.
                                    </div>
                                  )}
                                </div>
                              ) : (
                                <div className="text-xs bg-yellow-100 p-2 rounded text-yellow-700 border">
                                  ⚠️ Bot modu için &quot;🤖 Otomatik&quot; modunu seçin ve bot wallet oluşturun.
                                </div>
                              )}
                            </div>
                          ) : (
                            <div className="space-y-2">
                              <div className="text-xs bg-green-100 text-green-700 p-2 rounded border">
                                ✅ Alım emri hazır
                                <div className="text-xs mt-1">
                                  ⏰ Süre: {Math.round((preAuthBuyOrder.expiry.getTime() - Date.now()) / 60000)} dk kaldı
                                </div>
                              </div>
                              <div className="flex gap-2">
                                {preAuthBuyOrder.isBot && preAuthBuyOrder.requiredXLM ? (
                                  <Button
                                    onClick={async () => {
                                      try {
                                        // XLM iade et
                                        setAutoTradeStatus('💸 XLM iade ediliyor...');
                                        const refundResult = await refundXLMFromBot(preAuthBuyOrder.requiredXLM!);
                                        
                                        if (refundResult.success) {
                                          setAutoTradeStatus(`✅ ${preAuthBuyOrder.requiredXLM!.toFixed(2)} XLM iade edildi!`);
                                        }
                                        
                                        // Emri temizle
                                        setPreAuthBuyOrder(null);
                                        localStorage.removeItem(`preauth_buy_${publicKey}`);
                                        
                                        // Telegram bildirimi
                                        if (telegramBot && telegramChatId) {
                                          const message = `🤖 BOT ALIM EMRİ İPTAL!
❌ Alım emri iptal edildi
💸 ${preAuthBuyOrder.requiredXLM!.toFixed(2)} XLM iade edildi
⏰ ${new Date().toLocaleString('tr-TR')}`;
                                          
                                          await telegramBot.sendMessage(telegramChatId, message);
                                        }
                                        
                                      } catch (error) {
                                        setAutoTradeStatus(`❌ İptal hatası: ${error}`);
                                      }
                                    }}
                                    size="sm"
                                    variant="error"
                                    className="flex-1"
                                    disabled={isTrading}
                                  >
                                    ❌ İptal + İade
                                  </Button>
                                ) : null}
                                <Button
                                  onClick={() => {
                                    setPreAuthBuyOrder(null);
                                    localStorage.removeItem(`preauth_buy_${publicKey}`);
                                    if (preAuthBuyOrder.isBot && preAuthBuyOrder.requiredXLM) {
                                      setAutoTradeStatus('⚠️ Emri iptal ettiniz. XLM iade etmek için "❌ İptal + İade" butonunu kullanın.');
                                    }
                                  }}
                                  size="sm"
                                  variant="error"
                                  className="flex-1"
                                >
                                  🗑️ {preAuthBuyOrder.isBot ? 'Sadece Sil' : 'İptal Et'}
                                </Button>
                              </div>
                            </div>
                          )}
                          
                          {preAuthBuyOrder && (
                            <div className="text-xs p-2 rounded bg-green-50 text-green-700">
                              <div className="whitespace-pre-line">{preAuthBuyOrder.status}</div>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* Satım Ayarları */}
                    <div className="p-4 bg-red-50 rounded-lg border-2 border-red-200">
                      <h4 className="font-semibold text-red-800 mb-3">💸 Otomatik Satım</h4>
                      <div className="space-y-3">
                        <div>
                          <label className="block text-sm font-medium mb-1">Hedef Fiyat ($)</label>
                          <input
                            type="number"
                            step="0.0001"
                            placeholder="0.1400"
                            value={sellTargetPrice}
                            onChange={(e) => setSellTargetPrice(e.target.value)}
                            className="w-full px-3 py-2 border border-red-300 rounded"
                            disabled={isTrading || !isAutoTradingEnabled}
                          />
                          <p className="text-xs text-red-600 mt-1">
                            Fiyat ≥ Bu değerde sat
                          </p>
                        </div>
                        <div>
                          <label className="block text-sm font-medium mb-1">
                            Miktar ({ASSET_OPTIONS.find(a => a.value === autoTradeAssetIn)?.symbol})
                          </label>
                          <input
                            type="number"
                            min="1"
                            step="1"
                            placeholder="10"
                            value={autoSellAmount}
                            onChange={(e) => setAutoSellAmount(e.target.value)}
                            className="w-full px-3 py-2 border border-red-300 rounded"
                            disabled={isTrading || !isAutoTradingEnabled}
                          />
                        </div>
                        {sellTargetPrice && (
                          <div className={`text-sm p-2 rounded ${displayPrice >= parseFloat(sellTargetPrice) ? 'bg-red-200 text-red-800 font-bold' : 'bg-gray-100 text-gray-600'}`}>
                            {displayPrice >= parseFloat(sellTargetPrice) ? '🎯 HEDEF ULAŞILDI!' : '⏳ Hedef bekleniyor...'}
                          </div>
                        )}
                        
                        {/* Pre-Authorization Buttons */}
                        <div className="space-y-2">
                          {!preAuthSellOrder ? (
                            <div className="space-y-2">
                              {/* Manuel Mod Butonu */}
                              <Button
                                onClick={() => createPreAuthSellOrder(false)}
                                disabled={!sellTargetPrice || !autoSellAmount || !isConnected}
                                size="sm"
                                variant="secondary"
                                className="w-full"
                              >
                                👤 Manuel Satım Emri
                              </Button>
                              
                              {/* Bot Mod Butonu */}
                              {botMode === 'auto' && botWallet ? (
                                <Button
                                  onClick={() => createPreAuthSellOrder(true)}
                                  disabled={!sellTargetPrice || !autoSellAmount || !isConnected}
                                  size="sm"
                                  variant="error"
                                  className="w-full"
                                >
                                  🤖 Bot Satım Emri
                                </Button>
                              ) : (
                                <div className="text-xs bg-yellow-100 p-2 rounded text-yellow-700 border">
                                  ⚠️ Bot modu için &quot;🤖 Otomatik&quot; modunu seçin ve bot wallet oluşturun.
                                </div>
                              )}


                            </div>
                          ) : (
                            <div className="space-y-2">
                              <div className="text-xs bg-red-100 text-red-700 p-2 rounded border">
                                ✅ Satım emri hazır
                                <div className="text-xs mt-1">
                                  ⏰ Süre: {Math.round((preAuthSellOrder.expiry.getTime() - Date.now()) / 60000)} dk kaldı
                                </div>
                              </div>
                              <Button
                                onClick={() => {
                                  setPreAuthSellOrder(null);
                                  localStorage.removeItem(`preauth_sell_${publicKey}`);
                                }}
                                size="sm"
                                variant="error"
                                className="w-full"
                              >
                                ❌ Emri İptal
                              </Button>
                            </div>
                          )}
                          
                          {preAuthSellOrder && (
                            <div className="text-xs p-2 rounded bg-red-50 text-red-700">
                              <div className="whitespace-pre-line">{preAuthSellOrder.status}</div>
                            </div>
                          )}


                        </div>
                      </div>
                    </div>

                    {/* 🤖 Grid Trading Bot */}
                    <div className="p-4 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg border-2 border-purple-200">
                      <h4 className="font-semibold text-purple-800 mb-3">🤖 Grid Trading Bot (Alım + Satım)</h4>
                      <div className="text-xs text-purple-600 mb-3 p-2 bg-purple-50 rounded border">
                        🔄 <strong>İşlem Sırası:</strong> 1️⃣ İlk önce ALIM (düşük fiyat, bot&apos;da tutuluyor) → 2️⃣ Sonra SATIM (yüksek fiyat, kazanç ana cüzdana)
                      </div>
                      <div className="space-y-3">
                        <div className="grid grid-cols-2 gap-2">
                          <div>
                            <label className="block text-sm font-medium mb-1">Alım Fiyatı ($)</label>
                            <input
                              type="number"
                              step="0.0001"
                              placeholder="0.1300"
                              value={gridBuyPrice}
                              onChange={(e) => setGridBuyPrice(e.target.value)}
                              className="w-full px-2 py-2 border border-purple-300 rounded text-sm"
                              disabled={isTrading || (gridTradingBot?.isActive || false)}
                            />
                            <p className="text-xs text-purple-600 mt-1">
                              Fiyat ≤ Bu değerde al (eşit ve altı)
                            </p>
                          </div>
                          <div>
                            <label className="block text-sm font-medium mb-1">Satım Fiyatı ($)</label>
                            <input
                              type="number"
                              step="0.0001"
                              placeholder="0.1400"
                              value={gridSellPrice}
                              onChange={(e) => setGridSellPrice(e.target.value)}
                              className="w-full px-2 py-2 border border-purple-300 rounded text-sm"
                              disabled={isTrading || (gridTradingBot?.isActive || false)}
                            />
                            <p className="text-xs text-purple-600 mt-1">
                              Fiyat ≥ Bu değerde sat (eşit ve üstü)
                            </p>
                          </div>
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium mb-1">İşlem Miktarı</label>
                          <input
                            type="number"
                            step="0.01"
                            placeholder="100"
                            value={gridAmount}
                            onChange={(e) => setGridAmount(e.target.value)}
                            className="w-full px-3 py-2 border border-purple-300 rounded"
                            disabled={isTrading || (gridTradingBot?.isActive || false)}
                          />
                        </div>

                        {gridBuyPrice && gridSellPrice && (
                          <div className="p-2 bg-purple-100 rounded text-xs">
                            <div className="text-purple-700">
                              📈 Beklenen Kar Oranı: {gridBuyPrice && gridSellPrice ? 
                                ((parseFloat(gridSellPrice) - parseFloat(gridBuyPrice)) / parseFloat(gridBuyPrice) * 100).toFixed(2) : '0'}%
                            </div>
                            <div className="text-purple-600 mt-1">
                              🔄 İşlem: ${gridBuyPrice}&apos;da al → ${gridSellPrice}&apos;da sat
                            </div>
                          </div>
                        )}

                        <div className="grid grid-cols-2 gap-2">
                          {botMode === 'manual' ? (
                            <Button
                              onClick={() => createGridTradingBot(false)}
                              disabled={isTrading || !gridBuyPrice || !gridSellPrice || !gridAmount || 
                                       (gridTradingBot?.isActive || false)}
                              variant="primary"
                              size="sm"
                              className="w-full"
                            >
                              👤 Manuel Grid Bot
                            </Button>
                          ) : (
                            <Button
                              onClick={() => createGridTradingBot(true)}
                              disabled={isTrading || !gridBuyPrice || !gridSellPrice || !gridAmount || 
                                       !botWallet || (gridTradingBot?.isActive || false)}
                              variant="secondary"
                              size="sm"
                              className="w-full"
                            >
                              🤖 Otomatik Grid Bot
                            </Button>
                          )}
                          
                          {gridTradingBot?.isActive && (
                            <Button
                              onClick={() => {
                                setGridTradingBot(null);
                                localStorage.removeItem(`grid_bot_${publicKey}`);
                                setAutoTradeStatus('❌ Grid trading bot durduruldu.');
                              }}
                              variant="error"
                              size="sm"
                              className="w-full"
                            >
                              ❌ Bot&apos;u Durdur
                            </Button>
                          )}
                        </div>
                          
                        {gridTradingBot && (
                          <div className="text-xs p-2 rounded bg-purple-50 text-purple-700">
                            <div className="whitespace-pre-line">{gridTradingBot.status}</div>
                            <div className="mt-2 text-purple-600">
                              🔄 İşlem Aşaması: {
                                gridTradingBot.currentStep === 'waiting_buy' ? '1️⃣ Alım Bekleniyor (İlk Aşama)' : 
                                gridTradingBot.currentStep === 'waiting_sell' ? '2️⃣ Satım Bekleniyor (Alım Tamamlandı)' : 
                                '✅ Döngü Tamamlandı'
                              }
                            </div>
                            {gridTradingBot.currentStep === 'waiting_buy' && (
                              <div className="text-purple-600 text-xs mt-1">
                                📊 Hedef: Fiyat ${gridTradingBot.buyPrice} veya altına düştüğünde alım yapılacak
                              </div>
                            )}
                            {gridTradingBot.currentStep === 'waiting_sell' && (
                              <div className="text-purple-600 text-xs mt-1">
                                📊 Hedef: Fiyat ${gridTradingBot.sellPrice} veya üstüne çıktığında satım yapılacak
                              </div>
                            )}
                            {gridTradingBot.expiry && (
                              <div className="text-purple-500 text-xs mt-1">
                                ⏰ Kalan Süre: {Math.round((gridTradingBot.expiry.getTime() - Date.now()) / (1000 * 60))} dakika
                              </div>
                            )}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>

                  {/* Hızlı Test Butonları */}
                  <div className="grid grid-cols-2 gap-4">
                    <Button
                      onClick={() => {
                        const testPrice = (currentPrice * 0.995).toFixed(4);
                        setBuyTargetPrice(testPrice);
                        setAutoBuyAmount('1');
                        setIsAutoTradingEnabled(true);
                      }}
                      size="sm"
                      variant="success"
                      disabled={currentPrice === 0}
                    >
                      🧪 Test Alım (-0.5%)
                    </Button>
                    <Button
                      onClick={() => {
                        const testPrice = (currentPrice * 1.005).toFixed(4);
                        setSellTargetPrice(testPrice);
                        setAutoSellAmount('1');
                        setIsAutoTradingEnabled(true);
                      }}
                      size="sm"
                      variant="error"
                      disabled={currentPrice === 0}
                    >
                      🧪 Test Satım (+0.5%)
                    </Button>
                  </div>

                  {/* Durum Paneli */}
                  <div className="p-4 bg-white rounded-lg border-2 border-gray-200">
                    <h4 className="font-semibold mb-3">📊 Sistem Durumu</h4>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <div className="text-gray-600">Güncel Fiyat:</div>
                        <div className="font-mono text-lg font-bold">${displayPrice.toFixed(4)}</div>
                      </div>
                      <div>
                        <div className="text-gray-600">Sistem Durumu:</div>
                        <div className={`font-medium ${
                          hasAutoTradeError ? 'text-red-600' :
                          isTrading ? 'text-orange-600' :
                          isAutoTradingEnabled ? 'text-green-600' : 'text-gray-600'
                        }`}>
                          {hasAutoTradeError ? '🚨 Hata' : 
                           isTrading ? '⏳ İşlem Yapıyor' :
                           isAutoTradingEnabled ? '🟢 Aktif Bekliyor' : '⚪ Pasif'}
                        </div>
                      </div>
                    </div>
                    
                    {/* Pre-Auth Status */}
                    <div className="mt-4 grid grid-cols-2 gap-4 text-xs">
                      <div>
                        <div className="text-gray-600">Pre-Auth Alım:</div>
                        <div className={`font-medium ${preAuthBuyOrder ? 'text-green-600' : 'text-gray-400'}`}>
                          {preAuthBuyOrder ? '✅ Hazır' : '⚪ Yok'}
                        </div>
                      </div>
                      <div>
                        <div className="text-gray-600">Pre-Auth Satım:</div>
                        <div className={`font-medium ${preAuthSellOrder ? 'text-red-600' : 'text-gray-400'}`}>
                          {preAuthSellOrder ? '✅ Hazır' : '⚪ Yok'}
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Durum Mesajı */}
                  {autoTradeStatus && (
                    <div className={`text-sm p-4 rounded-lg border-2 ${
                      autoTradeStatus.startsWith('✅') ? 'bg-green-50 border-green-200 text-green-700' :
                      autoTradeStatus.startsWith('❌') ? 'bg-red-50 border-red-200 text-red-700' :
                      autoTradeStatus.startsWith('🎯') ? 'bg-blue-50 border-blue-200 text-blue-700' :
                      'bg-yellow-50 border-yellow-200 text-yellow-700'
                    }`}>
                      <div className="whitespace-pre-line font-medium">{autoTradeStatus}</div>
                    </div>
                  )}
                </div>
              ) : (
                <div className="text-center py-8">
                  <div className="text-gray-500 mb-4">🤖 Bot trading için Freighter wallet bağlantısı gerekli</div>
                  <Button onClick={connectWallet} disabled={!isAvailable} variant="success" className="mb-3">
                    🔗 Freighter&apos;a Bağlan
                  </Button>
                  <div className="text-xs text-yellow-700 bg-yellow-100 p-3 rounded border mx-4">
                    ⚠️ <strong>localhost bağlantı sorunu?</strong><br/>
                    Eğer &quot;domain not connected&quot; hatası alıyorsanız yukarıdaki butona basın.
                  </div>
                </div>
              )}
            </Card>
          </div>
        </div>

        {/* Bot Trading Açıklaması */}
        <Card title="📘 İkili Mod Sistemi Nasıl Çalışır?" className="bg-green-50 border-green-200">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm">
            <div>
              <h4 className="font-semibold mb-3 text-green-800">👤 Manuel Mod</h4>
              <ul className="space-y-2 text-green-700">
                <li>• <strong>1. Pre-Auth:</strong> &quot;👤 Manuel Alım Emri&quot; butonuna basın</li>
                <li>• <strong>2. Takip:</strong> Bot fiyat takibi yapar</li>
                <li>• <strong>3. Tetikleme:</strong> Hedef fiyatta alert + popup</li>
                <li>• <strong>4. İmza:</strong> Freighter açılır, işlemi imzalarsınız</li>
                <li>• <strong>5. Para:</strong> Ana cüzdanınızdan çıkar</li>
                <li>• <strong>6. İptal:</strong> &quot;🗑️ İptal Et&quot; ile iptal</li>
              </ul>
              <div className="mt-3 p-2 bg-blue-100 rounded text-blue-700">
                💡 <strong>Manuel mod:</strong> PC başında değilseniz işlem yapılmaz.
              </div>
            </div>
            <div>
              <h4 className="font-semibold mb-3 text-green-800">🤖 Bot Mod (Otomatik Transfer)</h4>
              <ul className="space-y-2 text-green-700">
                <li>• <strong>1. Hazırlık:</strong> Bot modu seçin ve bot wallet oluşturun</li>
                <li>• <strong>2. Transfer:</strong> &quot;🤖 Bot Alım Emri&quot; butonuna basın</li>
                <li>• <strong>3. Freighter:</strong> Gerekli XLM&apos;i bot wallet&apos;a transfer eder</li>
                <li>• <strong>4. Takip:</strong> Bot fiyat takibi yapar</li>
                <li>• <strong>5. Otomatik:</strong> Hedef fiyatta bot otomatik işlem yapar</li>
                <li>• <strong>6. İptal:</strong> &quot;❌ İptal + İade&quot; ile XLM geri alın</li>
              </ul>
              <div className="mt-3 p-2 bg-orange-100 rounded text-orange-700">
                🚀 <strong>Bot mod:</strong> PC başında olmadığınızda bile işlem yapar!
              </div>
            </div>
          </div>
          
          <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="p-3 bg-blue-50 rounded border-l-4 border-blue-400">
              <h5 className="font-semibold text-blue-800 mb-2">Manuel Mod Ne Zaman Kullanılır?</h5>
              <ul className="text-blue-700 text-sm space-y-1">
                <li>• PC başında olacaksınız</li>
                <li>• İşlemi kendiniz kontrol etmek istiyorsunuz</li>
                <li>• Ücreti önceden ödemek istemiyorsunuz</li>
              </ul>
            </div>
            <div className="p-3 bg-orange-50 rounded border-l-4 border-orange-400">
              <h5 className="font-semibold text-orange-800 mb-2">Bot Mod Ne Zaman Kullanılır?</h5>
              <ul className="text-orange-700 text-sm space-y-1">
                <li>• PC başında olmayacaksınız</li>
                <li>• Tam otomasyon istiyorsunuz</li>
                <li>• Önceden ücret ödeyebilirsiniz</li>
              </ul>
            </div>
          </div>
        </Card>

        {/* Önemli Notlar */}
        <Card title="⚠️ İkili Mod Sistemi Notları" className="bg-yellow-50 border-yellow-200">
          <div className="text-sm space-y-2 text-yellow-800">
            <p><strong>🎯 İki Ayrı Mod:</strong></p>
            <p><strong>👤 Manuel Mod:</strong> Ana cüzdanınızdan para çıkar, her işlemde imza gerekir, PC başında olmanız gerekli.</p>
            <p><strong>🤖 Bot Mod:</strong> Alım onayında Freighter ile XLM otomatik transfer, bot sizin adınıza işlem yapar, PC başında olmanız gerekmez.</p>
            <p><strong>� Freighter Transfer:</strong> &quot;Alım Emri Onayı (Freighter Transfer)&quot; butonuna basınca Freighter açılır ve otomatik transfer.</p>
            <p><strong>💸 Token Transfer:</strong> İşlem sonrası aldığınız token&apos;lar (USDC, XSTAR vs.) belirttiğiniz adrese otomatik gönderilir.</p>
            <p><strong>🎯 Akıllı Transfer:</strong> Bot tam olarak aldığınız asset türünü (USDC, XSTAR, vs.) size gönderir.</p>
            <p><strong>❌ İptal ve İade:</strong> Emri iptal ederseniz &quot;❌ İptal + İade&quot; ile XLM&apos;iniz iade edilir.</p>
            <p><strong>⏰ Geçerlilik:</strong> Pre-auth emirleri 2 saat geçerlidir.</p>
            <p><strong>💰 Test:</strong> Küçük miktarlarla test yapmanız önerilir.</p>
            <p><strong>📱 Bildirim:</strong> İşlem, transfer ve iptal işlemleri Telegram&apos;dan bildirilir.</p>
            <p><strong>🔐 Güvenlik:</strong> Bot secret key&apos;i kimseyle paylaşmayın!</p>
          </div>
        </Card>

        </>
        )}
      </div>
    </div>
  );
}
